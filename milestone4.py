# -*- coding: utf-8 -*-
"""Milestone4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uyQSU_AYe6kJWw1ap7t6wVJ5qXT0YPLj
"""

!pip install streamlit pyjwt pyngrok langdetect pandas plotly

# Commented out IPython magic to ensure Python compatibility.
# %%writefile kb.json
# {
#     "headache": {
#         "symptoms": ["headache","migraine","throbbing head","pain in head", "sir dard", "maatha dard", "sir mein dard", "рд╕рд┐рд░рджрд░реНрдж", "рдорд╛рдерд╛ рджрд░реНрдж", "рд╕рд┐рд░ рдореЗрдВ рджрд░реНрдж"],
#         "body_parts": ["head", "neck", "sir", "gardan", "рд╕рд┐рд░", "рдЧрд░реНрджрди"],
#         "condition_name_en": "headache",
#         "condition_name_hi": "рд╕рд┐рд░рджрд░реНрдж",
#         "responses": [
#             "ЁЯдЦ *Headache Relief (WHO/CDC Guidelines):*<br>1. Rest: Lie down in a cool, quiet, dark room.<br>2. Hydration: Drink plenty of water (dehydration is a common trigger).<br>3. Compress: Apply a cool or warm compress to the head or neck.<br>4. Medication: Use approved OTC pain relievers as directed.<br>5. Urgent Care: Seek help if pain is sudden, severe, or accompanied by confusion or fever."
#         ],
#         "hindi_responses": [
#             "ЁЯдЦ *рд╕рд┐рд░рджрд░реНрдж рд╕реЗ рд░рд╛рд╣рдд (WHO/CDC рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢):*<br>1. рдЖрд░рд╛рдо: рдПрдХ рд╢рд╛рдВрдд, рдардВрдбреЗ, рдЕрдВрдзреЗрд░реЗ рдХрдорд░реЗ рдореЗрдВ рд▓реЗрдЯ рдЬрд╛рдПрдВред<br>2. рд╣рд╛рдЗрдбреНрд░реЗрд╢рди: рдЦреВрдм рдкрд╛рдиреА рдкрд┐рдПрдВ (рдкрд╛рдиреА рдХреА рдХрдореА рдПрдХ рд╕рд╛рдорд╛рдиреНрдп рдЯреНрд░рд┐рдЧрд░ рд╣реИ)ред<br>3. рд╕реЗрдХ: рд╕рд┐рд░ рдпрд╛ рдЧрд░реНрджрди рдкрд░ рдардВрдбрд╛ рдпрд╛ рдЧрд░реНрдо рд╕реЗрдХ рд▓рдЧрд╛рдПрдВред<br>4. рджрд╡рд╛: рдирд┐рд░реНрджреЗрд╢рд┐рдд рдЕрдиреБрд╕рд╛рд░ рд╕реНрд╡реАрдХреГрдд рдУрдЯреАрд╕реА рджрд░реНрдж рдирд┐рд╡рд╛рд░рдХ рджрд╡рд╛рдУрдВ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред<br>5. рддрддреНрдХрд╛рд▓ рджреЗрдЦрднрд╛рд▓: рдпрджрд┐ рджрд░реНрдж рдЕрдЪрд╛рдирдХ, рдЧрдВрднреАрд░ рд╣реЛ, рдпрд╛ рднреНрд░рдо рдпрд╛ рдмреБрдЦрд╛рд░ рдХреЗ рд╕рд╛рде рд╣реЛ рддреЛ рд╕рд╣рд╛рдпрддрд╛ рд▓реЗрдВред"
#         ]
#     },
#     "migraine": {
#         "symptoms": ["migraine","severe headache","pulsating pain","aura","light sensitive", "tej sir dard", "adhe sir mein dard", "рдорд╛рдЗрдЧреНрд░реЗрди", "рддреЗрдЬ рд╕рд┐рд░рджрд░реНрдж"],
#         "body_parts": ["head", "eyes", "neck", "aankh", "sir", "рдЖрдВрдЦ", "рд╕рд┐рд░"],
#         "condition_name_en": "migraine",
#         "condition_name_hi": "рдорд╛рдЗрдЧреНрд░реЗрди",
#         "responses": [
#             "ЁЯдЦ *Migraine Management (WHO/CDC Guidelines):*<br>1. Retreat: Move immediately to a dark, quiet room.<br>2. Ice Pack: Apply an ice pack or cold compress to the forehead or neck.<br>3. Hydration: Drink water; dehydration can worsen a migraine.<br>4. Medication: Use prescription or OTC pain relievers as advised by a doctor.<br>5. Urgent Care: If this is the worst headache of your life, seek emergency medical attention."
#         ],
#         "hindi_responses": [
#             "ЁЯдЦ *рдорд╛рдЗрдЧреНрд░реЗрди рдкреНрд░рдмрдВрдзрди (WHO/CDC рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢):*<br>1. рдкреАрдЫреЗ рд╣рдЯреЗрдВ: рддреБрд░рдВрдд рдЕрдВрдзреЗрд░реЗ, рд╢рд╛рдВрдд рдХрдорд░реЗ рдореЗрдВ рдЪрд▓реЗ рдЬрд╛рдПрдВред<br>2. рдЖрдЗрд╕ рдкреИрдХ: рдорд╛рдереЗ рдпрд╛ рдЧрд░реНрджрди рдкрд░ рдЖрдЗрд╕ рдкреИрдХ рдпрд╛ рдардВрдбрд╛ рд╕реЗрдХ рд▓рдЧрд╛рдПрдВред<br>3. рд╣рд╛рдЗрдбреНрд░реЗрд╢рди: рдкрд╛рдиреА рдкрд┐рдПрдВ; рдирд┐рд░реНрдЬрд▓реАрдХрд░рдг рдорд╛рдЗрдЧреНрд░реЗрди рдХреЛ рдмрджрддрд░ рдмрдирд╛ рд╕рдХрддрд╛ рд╣реИред<br>4. рджрд╡рд╛: рдбреЙрдХреНрдЯрд░ рдХреА рд╕рд▓рд╛рд╣ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдирд┐рд░реНрдзрд╛рд░рд┐рдд рдпрд╛ рдУрдЯреАрд╕реА рджрд░реНрдж рдирд┐рд╡рд╛рд░рдХ рджрд╡рд╛рдУрдВ рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВред<br>5. рддрддреНрдХрд╛рд▓ рджреЗрдЦрднрд╛рд▓: рдпрджрд┐ рдпрд╣ рдЖрдкрдХреЗ рдЬреАрд╡рди рдХрд╛ рд╕рдмрд╕реЗ рдмреБрд░рд╛ рд╕рд┐рд░рджрд░реНрдж рд╣реИ, рддреЛ рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд╣рд╛рдпрддрд╛ рд▓реЗрдВред"
#         ]
#     },
#     "fever": {
#         "symptoms": ["fever","high temperature","feeling feverish","chills","temperature 102", "bukhar", "tapmaan", "jwar", "tez bukhar", "рдмреБрдЦрд╛рд░", "рддрд╛рдкрдорд╛рди", "рдЬреНрд╡рд░", "рддреЗрдЬрд╝ рдмреБрдЦрд╛рд░"],
#         "body_parts": ["body", "sharir", "рд╢рд░реАрд░"],
#         "condition_name_en": "fever",
#         "condition_name_hi": "рдмреБрдЦрд╛рд░",
#         "responses": [
#             "ЁЯдЦ *Fever Management (WHO/CDC Guidelines):*<br>1. Monitor: Measure and track your temperature regularly.<br>2. Fluids: Drink plenty of fluids (water, broth) to prevent dehydration.<br>3. Rest: Get adequate rest.<br>4. Cooling: Wear light clothes and use a cool compress.<br>5. Medication: Use paracetamol or ibuprofen as recommended for comfort.<br>6. Urgent Care: Seek a doctor if temperature is persistently above 39┬░C or lasts more than 3 days."
#         ],
#         "hindi_responses": [
#             "ЁЯдЦ *рдмреБрдЦрд╛рд░ рдкреНрд░рдмрдВрдзрди (WHO/CDC рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢):*<br>1. рдирд┐рдЧрд░рд╛рдиреА: рдЕрдкрдирд╛ рддрд╛рдкрдорд╛рди рдирд┐рдпрдорд┐рдд рд░реВрдк рд╕реЗ рдорд╛рдкреЗрдВ рдФрд░ рдЯреНрд░реИрдХ рдХрд░реЗрдВред<br>2. рддрд░рд▓ рдкрджрд╛рд░реНрде: рдирд┐рд░реНрдЬрд▓реАрдХрд░рдг рдХреЛ рд░реЛрдХрдиреЗ рдХреЗ рд▓рд┐рдП рдЦреВрдм рддрд░рд▓ рдкрджрд╛рд░реНрде (рдкрд╛рдиреА, рд╢реЛрд░рдмрд╛) рдкрд┐рдПрдВред<br>3. рдЖрд░рд╛рдо: рдкрд░реНрдпрд╛рдкреНрдд рдЖрд░рд╛рдо рдХрд░реЗрдВред<br>4. рдардВрдбрд╛ рд░рдЦрдирд╛: рд╣рд▓реНрдХреЗ рдХрдкрдбрд╝реЗ рдкрд╣рдиреЗрдВ рдФрд░ рдардВрдбрд╛ рд╕реЗрдХ рд▓рдЧрд╛рдПрдВред<br>5. рджрд╡рд╛: рдЖрд░рд╛рдо рдХреЗ рд▓рд┐рдП рдкреИрд░рд╛рд╕рд┐рдЯрд╛рдореЛрд▓ рдпрд╛ рдЗрдмреБрдкреНрд░реЛрдлреЗрди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред<br>6. рддрддреНрдХрд╛рд▓ рджреЗрдЦрднрд╛рд▓: рдпрджрд┐ рддрд╛рдкрдорд╛рди рд▓рдЧрд╛рддрд╛рд░ 39┬░C рд╕реЗ рдКрдкрд░ рд░рд╣рддрд╛ рд╣реИ рдпрд╛ 3 рджрд┐рдиреЛрдВ рд╕реЗ рдЕрдзрд┐рдХ рдЪрд▓рддрд╛ рд╣реИ рддреЛ рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВред"
#         ]
#     },
#     "cough/cold": {
#         "symptoms": ["cough","dry cough","wet cough","cold","stuffy nose", "runny nose", "khansi", "sookhi khansi", "geeli khansi", "sardi", "jukaam", "naak behna", "band naak", "рдЦрд╛рдВрд╕реА", "рд╕реВрдЦреА рдЦрд╛рдВрд╕реА", "рдЧреАрд▓реА рдЦрд╛рдВрд╕реА", "рд╕рд░реНрджреА", "рдЬреБрдХрд╛рдо", "рдирд╛рдХ рдмрд╣рдирд╛", "рдмрдВрдж рдирд╛рдХ", "flu", "рдлреНрд▓реВ"],
#         "body_parts": ["chest", "nose", "throat", "gala", "seena", "naak", "рдЧрд▓рд╛", "рд╕реАрдирд╛", "рдирд╛рдХ"],
#         "condition_name_en": "cough or cold",
#         "condition_name_hi": "рдЦрд╛рдВрд╕реА/рд╕рд░реНрджреА",
#         "responses": [
#             "ЁЯдЦ *Cough & Cold Care (Basic Guidelines):*<br>1. Hydration: Drink warm liquids (like tea with honey).<br>2. Steam: Use a humidifier or take a steamy shower to clear congestion.<br>3. Rest: Ensure adequate sleep.<br>4. Medication: Over-the-counter medicines may help with symptoms.<br>5. Urgent Care: Consult a doctor if cough is persistent (>2 weeks) or accompanied by chest pain."
#         ],
#         "hindi_responses": [
#             "ЁЯдЦ *рдЦрд╛рдВрд╕реА рдФрд░ рд╕рд░реНрджреА рдХреА рджреЗрдЦрднрд╛рд▓ (рдмреБрдирд┐рдпрд╛рджреА рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢):*<br>1. рд╣рд╛рдЗрдбреНрд░реЗрд╢рди: рдЧрд░реНрдо рддрд░рд▓ рдкрджрд╛рд░реНрде рдкрд┐рдПрдВред<br>2. рднрд╛рдк: рднреАрдбрд╝ рдХреЛ рдХрдо рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╣реНрдпреВрдорд┐рдбрд┐рдлрд╛рдпрд░ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ рдпрд╛ рднрд╛рдк рд▓реЗрдВред<br>3. рдЖрд░рд╛рдо: рдкрд░реНрдпрд╛рдкреНрдд рдиреАрдВрдж рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВред<br>4. рджрд╡рд╛: рдУрд╡рд░-рдж-рдХрд╛рдЙрдВрдЯрд░ рджрд╡рд╛рдПрдВ рд▓рдХреНрд╖рдгреЛрдВ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддреА рд╣реИрдВред<br>5. рддрддреНрдХрд╛рд▓ рджреЗрдЦрднрд╛рд▓: рдпрджрд┐ рдЦрд╛рдВрд╕реА рд▓рдЧрд╛рддрд╛рд░ рд╣реЛ (>2 рд╕рдкреНрддрд╛рд╣) рдпрд╛ рд╕реАрдиреЗ рдореЗрдВ рджрд░реНрдж рд╣реЛ рддреЛ рдбреЙрдХреНрдЯрд░ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВред"
#         ]
#     },
#     "sore throat": {
#         "symptoms": ["sore throat", "throat pain", "scratchy throat", "difficulty swallowing", "sore", "gale mein dard", "kharaash", "gala kharab", "рдЧрд▓реЗ рдореЗрдВ рджрд░реНрдж", "рдЦрд░рд╛рд╢", "рдЧрд▓рд╛ рдЦрд░рд╛рдм"],
#         "body_parts": ["throat", "tonsils", "gala", "рдЧрд▓рд╛"],
#         "condition_name_en": "sore throat",
#         "condition_name_hi": "рдЧрд▓реЗ рдореЗрдВ рдЦрд░рд╛рд╢",
#         "responses": [
#             "ЁЯдЦ *Sore Throat Relief (Basic Guidelines):*<br>1. Salt Water: Gargle with warm salt water several times a day.<br>2. Lozenges: Suck on lozenges or hard candy to keep the throat moist.<br>3. Warm Fluids: Drink warm liquids like herbal tea with honey.<br>4. Rest: Rest your voice and get plenty of sleep.<br>5. Urgent Care: See a doctor if symptoms are severe, include difficulty breathing, or last more than a week."
#         ],
#         "hindi_responses": [
#             "ЁЯдЦ *рдЧрд▓реЗ рдореЗрдВ рдЦрд░рд╛рд╢ рд╕реЗ рд░рд╛рд╣рдд (рдмреБрдирд┐рдпрд╛рджреА рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢):*<br>1. рдирдордХ рдХрд╛ рдкрд╛рдиреА: рджрд┐рди рдореЗрдВ рдХрдИ рдмрд╛рд░ рдЧрд░реНрдо рдирдордХ рдХреЗ рдкрд╛рдиреА рд╕реЗ рдЧрд░рд╛рд░реЗ рдХрд░реЗрдВред<br>2. рд▓реЛрдЬреЗрдВрдЬ/рдЯреЙрдлреА: рдЧрд▓реЗ рдХреЛ рдирдо рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рд▓реЛрдЬреЗрдВрдЬ рдпрд╛ рдЯреЙрдлреА рдЪреВрд╕реЗрдВред<br>3. рдЧрд░реНрдо рддрд░рд▓ рдкрджрд╛рд░реНрде: рд╢рд╣рдж рд╡рд╛рд▓реА рд╣рд░реНрдмрд▓ рдЪрд╛рдп рдЬреИрд╕реЗ рдЧрд░реНрдо рддрд░рд▓ рдкрджрд╛рд░реНрде рдкрд┐рдПрдВред<br>4. рдЖрд░рд╛рдо: рдЕрдкрдиреА рдЖрд╡рд╛рдЬ рдХреЛ рдЖрд░рд╛рдо рджреЗрдВ рдФрд░ рдЦреВрдм рд╕реЛрдПрдВред<br>5. рддрддреНрдХрд╛рд▓ рджреЗрдЦрднрд╛рд▓: рдпрджрд┐ рд▓рдХреНрд╖рдг рдЧрдВрднреАрд░ рд╣реИрдВ, рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдореЗрдВ рдХрдард┐рдирд╛рдИ рд╣реЛ рд░рд╣реА рд╣реИ, рдпрд╛ рдПрдХ рд╕рдкреНрддрд╛рд╣ рд╕реЗ рдЕрдзрд┐рдХ рд╕рдордп рддрдХ рд░рд╣рддреЗ рд╣реИрдВ рддреЛ рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВред"
#         ]
#     },
#     "allergies": {
#         "symptoms": ["allergy", "sneezing", "itchy eyes", "hay fever", "hives", "khujli", "cheenk", "aankh mein khujli", "рдПрд▓рд░реНрдЬреА", "рдЫреАрдВрдХ", "рдЦреБрдЬрд▓реА", "рдЖрдВрдЦ рдореЗрдВ рдЦреБрдЬрд▓реА"],
#         "body_parts": ["eyes", "nose", "skin", "aankh", "naak", "tvacha", "рдЖрдВрдЦ", "рдирд╛рдХ", "рддреНрд╡рдЪрд╛"],
#         "condition_name_en": "seasonal allergies",
#         "condition_name_hi": "рдПрд▓рд░реНрдЬреА",
#         "responses": [
#             "ЁЯдЦ *Allergy Management (CDC Guidelines):*<br>1. Avoid Triggers: Limit exposure to pollen, dust, or pet dander.<br>2. Medication: Use over-the-counter antihistamines or nasal sprays.<br>3. Rinse: Use a saline nasal rinse to clear allergens.<br>4. Air: Keep windows closed and use an air filter.<br>5. Urgent Care: Seek help if you have severe swelling or difficulty breathing (signs of anaphylaxis)."
#         ],
#         "hindi_responses": [
#             "ЁЯдЦ *рдПрд▓рд░реНрдЬреА рдкреНрд░рдмрдВрдзрди (CDC рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢):*<br>1. рдЯреНрд░рд┐рдЧрд░ рд╕реЗ рдмрдЪреЗрдВ: рдкрд░рд╛рдЧ, рдзреВрд▓, рдпрд╛ рдкрд╛рд▓рддреВ рдЬрд╛рдирд╡рд░реЛрдВ рдХреА рд░реВрд╕реА рдХреЗ рд╕рдВрдкрд░реНрдХ рдХреЛ рд╕реАрдорд┐рдд рдХрд░реЗрдВред<br>2. рджрд╡рд╛: рдУрд╡рд░-рдж-рдХрд╛рдЙрдВрдЯрд░ рдПрдВрдЯреАрд╣рд┐рд╕реНрдЯрд╛рдорд╛рдЗрди рдпрд╛ рдирд╛рдХ рд╕реНрдкреНрд░реЗ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред<br>3. рдХреБрд▓реНрд▓рд╛: рдПрд▓рд░реНрдЬреА рдХреЛ рд╕рд╛рдл рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╕рд▓рд╛рдЗрди рдирд╛рдХ рдХреБрд▓реНрд▓рд╛ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред<br>4. рд╣рд╡рд╛: рдЦрд┐рдбрд╝рдХрд┐рдпрд╛рдВ рдмрдВрдж рд░рдЦреЗрдВ рдФрд░ рдПрдпрд░ рдлрд┐рд▓реНрдЯрд░ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред<br>5. рддрддреНрдХрд╛рд▓ рджреЗрдЦрднрд╛рд▓: рдпрджрд┐ рдЖрдкрдХреЛ рдЧрдВрднреАрд░ рд╕реВрдЬрди рдпрд╛ рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдореЗрдВ рдХрдард┐рдирд╛рдИ (рдПрдирд╛рдлрд┐рд▓реЗрдХреНрд╕рд┐рд╕ рдХреЗ рд▓рдХреНрд╖рдг) рд╣реЛ рддреЛ рд╕рд╣рд╛рдпрддрд╛ рд▓реЗрдВред"
#         ]
#     },
#     "nausea/vomiting": {
#         "symptoms": ["nausea", "vomiting", "sick stomach", "uneasy stomach", "tummy ache", "matli", "ulti", "pet kharab", "je machlana", "pet dard", "рдорддрд▓реА", "рдЙрд▓реНрдЯреА", "рдкреЗрдЯ рдЦрд░рд╛рдм", "рдЬреА рдордЪрд▓рдирд╛", "рдкреЗрдЯ рджрд░реНрдж"],
#         "body_parts": ["stomach", "abdomen", "pet", "рдкреЗрдЯ"],
#         "condition_name_en": "nausea or vomiting",
#         "condition_name_hi": "рдорддрд▓реА/рдЙрд▓реНрдЯреА",
#         "responses": [
#             "ЁЯдЦ *Nausea & Vomiting Care (WHO/CDC Guidelines):*<br>1. Rest: Lie down and avoid movement.<br>2. Fluids: Drink small, slow sips of clear fluids (water, ORS) to prevent dehydration.<br>3. Diet: Avoid solid foods until vomiting stops. Gradually introduce bland foods (BRAT diet).<br>4. Urgent Care: Seek care if vomiting lasts over 24 hours, or if accompanied by severe pain or fever."
#         ],
#         "hindi_responses": [
#             "ЁЯдЦ *рдорддрд▓реА рдФрд░ рдЙрд▓реНрдЯреА рдХреА рджреЗрдЦрднрд╛рд▓ (WHO/CDC рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢):*<br>1. рдЖрд░рд╛рдо: рд▓реЗрдЯ рдЬрд╛рдПрдВ рдФрд░ рд╣рд┐рд▓рдиреЗ-рдбреБрд▓рдиреЗ рд╕реЗ рдмрдЪреЗрдВред<br>2. рддрд░рд▓ рдкрджрд╛рд░реНрде: рдирд┐рд░реНрдЬрд▓реАрдХрд░рдг рдХреЛ рд░реЛрдХрдиреЗ рдХреЗ рд▓рд┐рдП рдереЛрдбрд╝рд╛-рдереЛрдбрд╝рд╛ рд╕рд╛рдл рддрд░рд▓ рдкрджрд╛рд░реНрде (рдкрд╛рдиреА, рдУрдЖрд░рдПрд╕) рдкрд┐рдПрдВред<br>3. рдЖрд╣рд╛рд░: рдЙрд▓реНрдЯреА рд░реБрдХрдиреЗ рддрдХ рдареЛрд╕ рднреЛрдЬрди рд╕реЗ рдмрдЪреЗрдВред рдзреАрд░реЗ-рдзреАрд░реЗ рд╣рд▓реНрдХрд╛ (рд╕рд╛рджрд╛) рднреЛрдЬрди рд╢реБрд░реВ рдХрд░реЗрдВред<br>4. рддрддреНрдХрд╛рд▓ рджреЗрдЦрднрд╛рд▓: рдпрджрд┐ рдЙрд▓реНрдЯреА 24 рдШрдВрдЯреЗ рд╕реЗ рдЕрдзрд┐рдХ рдЪрд▓рддреА рд╣реИ, рдпрд╛ рддреЗрдЬ рджрд░реНрдж рдпрд╛ рдмреБрдЦрд╛рд░ рдХреЗ рд╕рд╛рде рд╣реЛ рддреЛ рджреЗрдЦрднрд╛рд▓ рд▓реЗрдВред"
#         ]
#     },
#     "diarrhea": {
#         "symptoms": ["diarrhea", "loose stools", "stomach cramps", "run to toilet", "bowel movement", "dast", "pet mein marod", "loose motion", "рджрд╕реНрдд", "рдкреЗрдЯ рдореЗрдВ рдорд░реЛрдбрд╝", "рд▓реВрдЬ рдореЛрд╢рди"],
#         "body_parts": ["stomach", "bowel", "abdomen", "pet", "рдкреЗрдЯ"],
#         "condition_name_en": "diarrhea",
#         "condition_name_hi": "рджрд╕реНрдд",
#         "responses": [
#             "ЁЯдЦ *Diarrhea Management (WHO/CDC Guidelines):*<br>1. Hydration: Drink plenty of Oral Rehydration Solution (ORS) or water.<br>2. Diet: Continue eating light, bland foods (toast, bananas, rice).<br>3. Avoid: Avoid dairy, spicy, and fatty foods.<br>4. Medication: Over-the-counter antidiarrheals may provide relief.<br>5. Urgent Care: See a doctor if diarrhea is bloody, lasts more than two days, or if signs of severe dehydration are present."
#         ],
#         "hindi_responses": [
#             "ЁЯдЦ *рджрд╕реНрдд рдкреНрд░рдмрдВрдзрди (WHO/CDC рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢):*<br>1. рд╣рд╛рдЗрдбреНрд░реЗрд╢рди: рдЦреВрдм рд╕рд╛рд░рд╛ рдУрдЖрд░рдПрд╕ рдпрд╛ рдкрд╛рдиреА рдкрд┐рдПрдВред<br>2. рдЖрд╣рд╛рд░: рд╣рд▓реНрдХрд╛, рд╕рд╛рджрд╛ рднреЛрдЬрди (рдЯреЛрд╕реНрдЯ, рдХреЗрд▓рд╛, рдЪрд╛рд╡рд▓) рдЦрд╛рддреЗ рд░рд╣реЗрдВред<br>3. рдмрдЪреЗрдВ: рдбреЗрдпрд░реА, рдорд╕рд╛рд▓реЗрджрд╛рд░ рдФрд░ рд╡рд╕рд╛рдпреБрдХреНрдд рднреЛрдЬрди рд╕реЗ рдмрдЪреЗрдВред<br>4. рджрд╡рд╛: рдУрдЯреАрд╕реА рджрд╕реНрдд рд░реЛрдзреА рджрд╡рд╛рдПрдВ рд░рд╛рд╣рдд рджреЗ рд╕рдХрддреА рд╣реИрдВред<br>5. рддрддреНрдХрд╛рд▓ рджреЗрдЦрднрд╛рд▓: рдпрджрд┐ рджрд╕реНрдд рдореЗрдВ рдЦреВрди рдЖрддрд╛ рд╣реИ, рджреЛ рджрд┐рди рд╕реЗ рдЕрдзрд┐рдХ рд░рд╣рддрд╛ рд╣реИ, рдпрд╛ рдЧрдВрднреАрд░ рдирд┐рд░реНрдЬрд▓реАрдХрд░рдг рдХреЗ рд▓рдХреНрд╖рдг рд╣реЛрдВ рддреЛ рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВред"
#         ]
#     },
#     "constipation": {
#         "symptoms": ["constipation", "hard stools", "straining", "infrequent bowels", "kabz", "pet saaf nahi hona", "рдХрдмреНрдЬ", "рдкреЗрдЯ рд╕рд╛рдл рдирд╣реАрдВ рд╣реЛрдирд╛"],
#         "body_parts": ["bowel", "abdomen", "pet", "рдкреЗрдЯ"],
#         "condition_name_en": "constipation",
#         "condition_name_hi": "рдХрдмреНрдЬ",
#         "responses": [
#             "ЁЯдЦ *Constipation Relief (CDC Guidelines):*<br>1. Fiber: Increase intake of high-fiber foods (fruits, vegetables, whole grains).<br>2. Hydration: Drink plenty of water throughout the day.<br>3. Activity: Regular physical activity can help stimulate bowel movements.<br>4. Medication: Over-the-counter stool softeners or laxatives may be used short-term.<br>5. Urgent Care: Consult a doctor if you experience severe abdominal pain or blood in stool."
#         ],
#         "hindi_responses": [
#             "ЁЯдЦ *рдХрдмреНрдЬ рд╕реЗ рд░рд╛рд╣рдд (CDC рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢):*<br>1. рдлрд╛рдЗрдмрд░: рдЙрдЪреНрдЪ рдлрд╛рдЗрдмрд░ рд╡рд╛рд▓реЗ рдЦрд╛рджреНрдп рдкрджрд╛рд░реНрдереЛрдВ (рдлрд▓, рд╕рдмреНрдЬрд┐рдпрд╛рдВ) рдХрд╛ рд╕реЗрд╡рди рдмрдврд╝рд╛рдПрдБред<br>2. рд╣рд╛рдЗрдбреНрд░реЗрд╢рди: рджрд┐рди рднрд░ рдЦреВрдм рдкрд╛рдиреА рдкрд┐рдПрдВред<br>3. рдЧрддрд┐рд╡рд┐рдзрд┐: рдирд┐рдпрдорд┐рдд рд╢рд╛рд░реАрд░рд┐рдХ рдЧрддрд┐рд╡рд┐рдзрд┐ рдорд▓ рддреНрдпрд╛рдЧ рдХреЛ рдЙрддреНрддреЗрдЬрд┐рдд рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддреА рд╣реИред<br>4. рджрд╡рд╛: рдУрд╡рд░-рдж-рдХрд╛рдЙрдВрдЯрд░ рд╕реНрдЯреВрд▓ рд╕реЙрдлреНрдЯрдирд░ рдпрд╛ рдЬреБрд▓рд╛рдм рдХрд╛ рдЙрдкрдпреЛрдЧ рдЕрд▓реНрдкрдХрд╛рд▓рд┐рдХ рд░реВрдк рд╕реЗ рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИред<br>5. рддрддреНрдХрд╛рд▓ рджреЗрдЦрднрд╛рд▓: рдпрджрд┐ рдЖрдкрдХреЛ рдЧрдВрднреАрд░ рдкреЗрдЯ рджрд░реНрдж рдпрд╛ рдорд▓ рдореЗрдВ рд░рдХреНрдд рдЖрддрд╛ рд╣реИ рддреЛ рдбреЙрдХреНрдЯрд░ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВред"
#         ]
#     },
#     "dehydration": {
#         "symptoms": ["thirsty","dehydration","Dehydrated", "dry mouth", "dizziness", "urinating less", "low water", "pyas", "paani ki kami", "sookha munh", "chakkar", "рдкреНрдпрд╛рд╕", "рдкрд╛рдиреА рдХреА рдХрдореА", "рд╕реВрдЦрд╛ рдореБрдВрд╣", "рдЪрдХреНрдХрд░"],
#         "body_parts": ["mouth", "skin", "body", "sharir", "munh", "рд╢рд░реАрд░", "рдореБрдВрд╣"],
#         "condition_name_en": "dehydration",
#         "condition_name_hi": "рдирд┐рд░реНрдЬрд▓реАрдХрд░рдг",
#         "responses": [
#             "ЁЯдЦ *Dehydration Management (WHO/CDC Guidelines):*<br>1. Fluids: Drink small amounts of water or clear fluids constantly.<br>2. Electrolytes: Use Oral Rehydration Salts (ORS) or sports drinks to replace lost salts.<br>3. Rest: Avoid sun exposure or strenuous activity.<br>4. Urgent Care: Seek help if confusion, fast heart rate, or inability to keep fluids down occurs."
#         ],
#         "hindi_responses": [
#             "ЁЯдЦ *рдирд┐рд░реНрдЬрд▓реАрдХрд░рдг рдкреНрд░рдмрдВрдзрди (WHO/CDC рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢):*<br>1. рддрд░рд▓ рдкрджрд╛рд░реНрде: рд▓рдЧрд╛рддрд╛рд░ рдереЛрдбрд╝реА рдорд╛рддреНрд░рд╛ рдореЗрдВ рдкрд╛рдиреА рдпрд╛ рд╕рд╛рдл рддрд░рд▓ рдкрджрд╛рд░реНрде рдкрд┐рдПрдВред<br>2. рдЗрд▓реЗрдХреНрдЯреНрд░реЛрд▓рд╛рдЗрдЯреНрд╕: рдЦреЛрдП рд╣реБрдП рдирдордХ рдХреЛ рдмрджрд▓рдиреЗ рдХреЗ рд▓рд┐рдП рдУрдЖрд░рдПрд╕ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред<br>3. рдЖрд░рд╛рдо: рдзреВрдк рдпрд╛ рдЬрд╝реЛрд░рджрд╛рд░ рдЧрддрд┐рд╡рд┐рдзрд┐ рд╕реЗ рдмрдЪреЗрдВред<br>4. рддрддреНрдХрд╛рд▓ рджреЗрдЦрднрд╛рд▓: рдпрджрд┐ рднреНрд░рдо, рддреЗрдЬрд╝ рджрд┐рд▓ рдХреА рдзрдбрд╝рдХрди, рдпрд╛ рддрд░рд▓ рдкрджрд╛рд░реНрде рдХреЛ рдкреЗрдЯ рдореЗрдВ рд░рдЦрдиреЗ рдореЗрдВ рдЕрд╕рдорд░реНрдерддрд╛ рд╣реЛрддреА рд╣реИ рддреЛ рд╕рд╣рд╛рдпрддрд╛ рд▓реЗрдВред"
#         ]
#     },
#     "sunburn/burn": {
#         "symptoms": ["sunburn", "minor burn", "red skin", "blister", "hot skin", "dhoop se jalan", "jalna", "chhaale", "laal tvacha", "рдзреВрдк рд╕реЗ рдЬрд▓рди", "рдЬрд▓рдирд╛", "рдЫрд╛рд▓реЗ", "рд▓рд╛рд▓ рддреНрд╡рдЪрд╛", "burns"],
#         "body_parts": ["skin", "arm", "face", "tvacha", "рддреНрд╡рдЪрд╛"],
#         "condition_name_en": "sunburn or minor burn",
#         "condition_name_hi": "рдзреВрдк рдХреА рдЬрд▓рди/рдорд╛рдореВрд▓реА рдЬрд▓рди",
#         "responses": [
#             "ЁЯдЦ *Sunburn & Minor Burn First Aid (CDC Guidelines):*<br>1. Cool: Immediately run cool (not cold) water over the area for 10-15 minutes.<br>2. Moisturize: Apply aloe vera or a moisturizing lotion (not oil or butter).<br>3. Pain: Take over-the-counter pain relievers.<br>4. Protect: Keep the area covered and out of the sun.<br>5. Urgent Care: Seek help for burns larger than a few inches, deep burns, or severe blistering."
#         ],
#         "hindi_responses": [
#             "ЁЯдЦ *рдзреВрдк рдХреА рдЬрд▓рди рдФрд░ рдорд╛рдореВрд▓реА рдЬрд▓рди рдкреНрд░рд╛рдердорд┐рдХ рдЙрдкрдЪрд╛рд░ (CDC рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢):*<br>1. рдардВрдбрд╛ рдХрд░реЗрдВ: рддреБрд░рдВрдд рдЙрд╕ рдЬрдЧрд╣ рдкрд░ 10-15 рдорд┐рдирдЯ рдХреЗ рд▓рд┐рдП рдардВрдбрд╛ (рдмрд░реНрдлрд╝реАрд▓рд╛ рдирд╣реАрдВ) рдкрд╛рдиреА рдбрд╛рд▓реЗрдВред<br>2. рдореЙрдЗрд╕реНрдЪрд░рд╛рдЗрдЬрд╝ рдХрд░реЗрдВ: рдПрд▓реЛрд╡реЗрд░рд╛ рдпрд╛ рдореЙрдЗрд╕реНрдЪрд░рд╛рдЗрдЬрд╝рд┐рдВрдЧ рд▓реЛрд╢рди рд▓рдЧрд╛рдПрдВ (рддреЗрд▓ рдпрд╛ рдордХреНрдЦрди рдирд╣реАрдВ)ред<br>3. рджрд░реНрдж: рдУрд╡рд░-рдж-рдХрд╛рдЙрдВрдЯрд░ рджрд░реНрдж рдирд┐рд╡рд╛рд░рдХ рд▓реЗрдВред<br>4. рд╕реБрд░рдХреНрд╖рд┐рдд рдХрд░реЗрдВ: рдЙрд╕ рдЬрдЧрд╣ рдХреЛ рдврдХ рдХрд░ рд░рдЦреЗрдВ рдФрд░ рдзреВрдк рд╕реЗ рдмрдЪрд╛рдПрдВред<br>5. рддрддреНрдХрд╛рд▓ рджреЗрдЦрднрд╛рд▓: рдХреБрдЫ рдЗрдВрдЪ рд╕реЗ рдмрдбрд╝реЗ рдЬрд▓рдиреЗ, рдЧрд╣рд░реЗ рдЬрд▓рдиреЗ, рдпрд╛ рдЧрдВрднреАрд░ рдЫрд╛рд▓реЗ рд╣реЛрдиреЗ рдкрд░ рд╕рд╣рд╛рдпрддрд╛ рд▓реЗрдВред"
#         ]
#     },
#     "cut": {
#         "symptoms": ["cut","bleeding","wound","scratch","injury", "chot", "zakhm", "khoon behna", "katna", "рдЪреЛрдЯ", "рдЬрд╝рдЦреНрдо", "рдЦреВрди рдмрд╣рдирд╛", "рдХрдЯрдирд╛"],
#         "body_parts": ["finger", "hand", "arm", "leg", "skin", "ungli", "haath", "pair", "tvacha", "рдЙрдВрдЧрд▓реА", "рд╣рд╛рде", "рдкреИрд░", "рддреНрд╡рдЪрд╛"],
#         "condition_name_en": "cut/wound",
#         "condition_name_hi": "рдХрдЯ/рдШрд╛рд╡",
#         "responses": [
#             "ЁЯдЦ *Cut First Aid (Basic Guidelines):*<br>1. Stop Bleeding: Apply firm, direct pressure with a clean cloth.<br>2. Clean: Wash the wound gently with soap and clean water.<br>3. Antiseptic: Apply a thin layer of antibiotic ointment.<br>4. Cover: Cover with a sterile bandage to keep it clean.<br>5. Urgent Care: Seek care if the cut is deep, gaping, or if bleeding doesn't stop."
#         ],
#         "hindi_responses": [
#             "ЁЯдЦ *рдХрдЯрдиреЗ рдкрд░ рдкреНрд░рд╛рдердорд┐рдХ рдЙрдкрдЪрд╛рд░ (рдмреБрдирд┐рдпрд╛рджреА рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢):*<br>1. рдЦреВрди рд░реЛрдХреЗрдВ: рдПрдХ рд╕рд╛рдл рдХрдкрдбрд╝реЗ рд╕реЗ рдордЬрдмреВрдд, рд╕реАрдзрд╛ рджрдмрд╛рд╡ рдбрд╛рд▓реЗрдВред<br>2. рд╕рд╛рдл рдХрд░реЗрдВ: рдШрд╛рд╡ рдХреЛ рд╕рд╛рдмреБрди рдФрд░ рд╕рд╛рдл рдкрд╛рдиреА рд╕реЗ рдзреАрд░реЗ рд╕реЗ рдзреЛрдПрдВред<br>3. рдПрдВрдЯреАрд╕реЗрдкреНрдЯрд┐рдХ: рдПрдВрдЯреАрдмрд╛рдпреЛрдЯрд┐рдХ рдорд▓рд╣рдо рдХреА рдПрдХ рдкрддрд▓реА рдкрд░рдд рд▓рдЧрд╛рдПрдВред<br>4. рдврдХреЗрдВ: рдЗрд╕реЗ рд╕рд╛рдл рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдмрд╛рдБрдЭ рдкрдЯреНрдЯреА рд╕реЗ рдврдХ рджреЗрдВред<br>5. рддрддреНрдХрд╛рд▓ рджреЗрдЦрднрд╛рд▓: рдпрджрд┐ рдХрдЯ рдЧрд╣рд░рд╛ рд╣реЛ, рдЦреБрд▓рд╛ рд╣реЛ, рдпрд╛ рдЦреВрди рдмрд╣рдирд╛ рдмрдВрдж рди рд╣реЛ рддреЛ рджреЗрдЦрднрд╛рд▓ рд▓реЗрдВред"
#         ]
#     },
#     "minor head injury": {
#         "symptoms": ["head bump", "minor head injury", "concussion", "dizziness after hit", "sir par chot", "chakkar aana", "рд╕рд┐рд░ рдкрд░ рдЪреЛрдЯ", "рдЪрдХреНрдХрд░ рдЖрдирд╛"],
#         "body_parts": ["head", "sir", "рд╕рд┐рд░"],
#         "condition_name_en": "minor head injury",
#         "condition_name_hi": "рдорд╛рдореВрд▓реА рд╕рд┐рд░ рдХреА рдЪреЛрдЯ",
#         "responses": [
#             "ЁЯдЦ *Minor Head Injury Care (CDC Guidelines):*<br>1. Rest: Get plenty of rest; avoid physical and mental strain.<br>2. Ice: Apply an ice pack to the injury site for 15-20 minutes.<br>3. Observation: Monitor for worsening symptoms like severe headache or repeated vomiting.<br>4. Medication: Use acetaminophen (Paracetamol) for pain (avoid NSAIDs initially).<br>5. Urgent Care: Seek emergency help if loss of consciousness, confusion, slurred speech, or repeated vomiting occurs."
#         ],
#         "hindi_responses": [
#             "ЁЯдЦ *рдорд╛рдореВрд▓реА рд╕рд┐рд░ рдХреА рдЪреЛрдЯ рдХреА рджреЗрдЦрднрд╛рд▓ (CDC рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢):*<br>1. рдЖрд░рд╛рдо: рдЦреВрдм рдЖрд░рд╛рдо рдХрд░реЗрдВ; рд╢рд╛рд░реАрд░рд┐рдХ рдФрд░ рдорд╛рдирд╕рд┐рдХ рддрдирд╛рд╡ рд╕реЗ рдмрдЪреЗрдВред<br>2. рдмрд░реНрдл: рдЪреЛрдЯ рдХреА рдЬрдЧрд╣ рдкрд░ 15-20 рдорд┐рдирдЯ рдХреЗ рд▓рд┐рдП рдЖрдЗрд╕ рдкреИрдХ рд▓рдЧрд╛рдПрдВред<br>3. рдирд┐рдЧрд░рд╛рдиреА: рдЧрдВрднреАрд░ рд╕рд┐рд░рджрд░реНрдж рдпрд╛ рдмрд╛рд░-рдмрд╛рд░ рдЙрд▓реНрдЯреА рдЬреИрд╕реЗ рдмрд┐рдЧрдбрд╝рддреЗ рд▓рдХреНрд╖рдгреЛрдВ рдХреЗ рд▓рд┐рдП рдирд┐рдЧрд░рд╛рдиреА рдХрд░реЗрдВред<br>4. рджрд╡рд╛: рджрд░реНрдж рдХреЗ рд▓рд┐рдП рдПрд╕рд┐рдЯрд╛рдорд┐рдиреЛрдлреЗрди (рдкреЗрд░рд╛рд╕рд┐рдЯрд╛рдореЛрд▓) рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред<br>5. рддрддреНрдХрд╛рд▓ рджреЗрдЦрднрд╛рд▓: рдпрджрд┐ рдЪреЗрддрдирд╛ рдХрд╛ рдиреБрдХрд╕рд╛рди, рднреНрд░рдо, рд▓рдбрд╝рдЦрдбрд╝рд╛рддреА рд╣реБрдИ рдмреЛрд▓реА, рдпрд╛ рдмрд╛рд░-рдмрд╛рд░ рдЙрд▓реНрдЯреА рд╣реЛрддреА рд╣реИ рддреЛ рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рд╣рд╛рдпрддрд╛ рд▓реЗрдВред"
#         ]
#     },
#     "pain/sprain": {
#         "symptoms": ["pain","ache","sprain","twist","swollen", "dard", "moch", "sujan", "рджрд░реНрдж", "рдореЛрдЪ", "рд╕реВрдЬрди"],
#         "body_parts": ["ankle","knee","wrist","joint","muscle", "takhna", "ghutna", "kalai", "jod", "maansapeshee", "рдЯрдЦрдирд╛", "рдШреБрдЯрдирд╛", "рдХрд▓рд╛рдИ", "рдЬреЛрдбрд╝", "рдорд╛рдВрд╕рдкреЗрд╢реА"],
#         "condition_name_en": "sprain/strain",
#         "condition_name_hi": "рдореЛрдЪ/рдЦрд┐рдВрдЪрд╛рд╡",
#         "responses": [
#             "ЁЯдЦ *Sprain/Strain Care (R.I.C.E. Principle):*<br>1. Rest: Avoid using the injured joint/limb for 48 hours.<br>2. Ice: Apply a cold compress or ice pack for 15-20 minutes, 3-4 times a day.<br>3. Compression: Use a compression bandage to reduce swelling.<br>4. Elevation: Keep the injury raised above your heart level.<br>5. Urgent Care: See a doctor if you cannot put weight on the joint or if swelling is severe."
#         ],
#         "hindi_responses": [
#             "ЁЯдЦ *рдореЛрдЪ/рдЦрд┐рдВрдЪрд╛рд╡ рдХреА рджреЗрдЦрднрд╛рд▓ (R.I.C.E. рд╕рд┐рджреНрдзрд╛рдВрдд):*<br>1. рдЖрд░рд╛рдо: рдШрд╛рдпрд▓ рдЬреЛрдбрд╝/рдЕрдВрдЧ рдХрд╛ 48 рдШрдВрдЯреЗ рддрдХ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рд╕реЗ рдмрдЪреЗрдВред<br>2. рдмрд░реНрдл: рджрд┐рди рдореЗрдВ 3-4 рдмрд╛рд░ 15-20 рдорд┐рдирдЯ рдХреЗ рд▓рд┐рдП рдардВрдбрд╛ рд╕реЗрдХ рд▓рдЧрд╛рдПрдВред<br>3. рджрдмрд╛рд╡: рд╕реВрдЬрди рдХрдо рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХрдВрдкреНрд░реЗрд╢рди рдкрдЯреНрдЯреА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред<br>4. рдКрдБрдЪрд╛рдИ: рдЪреЛрдЯ рдХреЛ рдЕрдкрдиреЗ рджрд┐рд▓ рдХреЗ рд╕реНрддрд░ рд╕реЗ рдКрдкрд░ рдЙрдард╛ рдХрд░ рд░рдЦреЗрдВред<br>5. рддрддреНрдХрд╛рд▓ рджреЗрдЦрднрд╛рд▓: рдпрджрд┐ рдЖрдк рдЬреЛрдбрд╝ рдкрд░ рд╡рдЬрди рдирд╣реАрдВ рдбрд╛рд▓ рд╕рдХрддреЗ рд╣реИрдВ рдпрд╛ рд╕реВрдЬрди рдЧрдВрднреАрд░ рд╣реИ рддреЛ рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВред"
#         ]
#     },
#     "back pain": {
#         "symptoms": ["back pain", "lower back pain", "muscle strain", "aching back", "kamar dard", "peeth mein dard", "рдХрдорд░ рджрд░реНрдж", "рдкреАрда рдореЗрдВ рджрд░реНрдж"],
#         "body_parts": ["back", "spine", "muscle", "kamar", "peeth", "maansapeshee", "рдХрдорд░", "рдкреАрда", "рдорд╛рдВрд╕рдкреЗрд╢реА"],
#         "condition_name_en": "acute back pain",
#         "condition_name_hi": "рддреАрд╡реНрд░ рдкреАрда рджрд░реНрдж",
#         "responses": [
#             "ЁЯдЦ *Acute Back Pain Relief (Basic Guidelines):*<br>1. Activity: Stay active, but avoid heavy lifting or twisting.<br>2. Heat/Ice: Use a heating pad or ice pack, whichever provides more relief.<br>3. Posture: Ensure you maintain good posture while sitting or standing.<br>4. Medication: OTC pain relievers (like NSAIDs) can help manage short-term pain.<br>5. Urgent Care: See a doctor if pain is severe, travels down the leg, or is accompanied by numbness or fever."
#         ],
#         "hindi_responses": [
#             "ЁЯдЦ *рддреАрд╡реНрд░ рдкреАрда рджрд░реНрдж рд╕реЗ рд░рд╛рд╣рдд (рдмреБрдирд┐рдпрд╛рджреА рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢):*<br>1. рдЧрддрд┐рд╡рд┐рдзрд┐: рд╕рдХреНрд░рд┐рдп рд░рд╣реЗрдВ, рд▓реЗрдХрд┐рди рднрд╛рд░реА рд╕рд╛рдорд╛рди рдЙрдард╛рдиреЗ рдпрд╛ рдореБрдбрд╝рдиреЗ рд╕реЗ рдмрдЪреЗрдВред<br>2. рдЧрд░реНрдо/рдардВрдбрд╛: рд╣реАрдЯрд┐рдВрдЧ рдкреИрдб рдпрд╛ рдЖрдЗрд╕ рдкреИрдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ, рдЬреЛ рднреА рдЕрдзрд┐рдХ рд░рд╛рд╣рдд рджреЗред<br>3. рдореБрджреНрд░рд╛: рдмреИрдарддреЗ рдпрд╛ рдЦрдбрд╝реЗ рд╣реЛрддреЗ рд╕рдордп рд╕рд╣реА рдореБрджреНрд░рд╛ рдмрдирд╛рдП рд░рдЦреЗрдВред<br>4. рджрд╡рд╛: рдУрдЯреАрд╕реА рджрд░реНрдж рдирд┐рд╡рд╛рд░рдХ (рдЬреИрд╕реЗ NSAIDs) рдЕрд▓реНрдкрдХрд╛рд▓рд┐рдХ рджрд░реНрдж рдХреЛ рдкреНрд░рдмрдВрдзрд┐рдд рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред<br>5. рддрддреНрдХрд╛рд▓ рджреЗрдЦрднрд╛рд▓: рдпрджрд┐ рджрд░реНрдж рдЧрдВрднреАрд░ рд╣реИ, рдкреИрд░ рдореЗрдВ рдлреИрд▓ рд░рд╣рд╛ рд╣реИ, рдпрд╛ рд╕реБрдиреНрдирддрд╛ рдпрд╛ рдмреБрдЦрд╛рд░ рдХреЗ рд╕рд╛рде рд╣реИ рддреЛ рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВред"
#         ]
#     },
#     "insomnia": {
#         "symptoms": ["insomnia", "cannot sleep", "trouble sleeping", "tiredness", "neend nahi aana", "anidra", "thakaan", "рдиреАрдВрдж рдирд╣реАрдВ рдЖрдирд╛", "рдЕрдирд┐рджреНрд░рд╛", "рдердХрд╛рди", "sleep", "рдиреАрдВрдж"],
#         "body_parts": ["body", "head", "sharir", "sir", "рд╢рд░реАрд░", "рд╕рд┐рд░"],
#         "condition_name_en": "insomnia or sleep issues",
#         "condition_name_hi": "рдЕрдирд┐рджреНрд░рд╛/рдиреАрдВрдж рдХреА рд╕рдорд╕реНрдпрд╛",
#         "responses": [
#             "ЁЯдЦ *Insomnia & Sleep Hygiene (WHO/CDC Guidelines):*<br>1. Schedule: Go to bed and wake up at the same time daily.<br>2. Environment: Ensure your bedroom is dark, quiet, and cool.<br>3. Avoid: Limit caffeine, large meals, and screens before bedtime.<br>4. Relax: Develop a relaxing pre-sleep routine (reading, bath).<br>5. Consult: If insomnia is persistent or affects your daily life, speak to a healthcare professional."
#         ],
#         "hindi_responses": [
#             "ЁЯдЦ *рдЕрдирд┐рджреНрд░рд╛ рдФрд░ рдиреАрдВрдж рд╕реНрд╡рдЪреНрдЫрддрд╛ (WHO/CDC рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢):*<br>1. рд╕рдордп рд╕рд╛рд░рдгреА: рд░реЛрдЬ рдПрдХ рд╣реА рд╕рдордп рдкрд░ рдмрд┐рд╕реНрддрд░ рдкрд░ рдЬрд╛рдПрдВ рдФрд░ рдЬрд╛рдЧреЗрдВред<br>2. рд╡рд╛рддрд╛рд╡рд░рдг: рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдЖрдкрдХрд╛ рдмреЗрдбрд░реВрдо рдЕрдВрдзреЗрд░рд╛, рд╢рд╛рдВрдд рдФрд░ рдардВрдбрд╛ рд╣реЛред<br>3. рдмрдЪреЗрдВ: рд╕реЛрдиреЗ рд╕реЗ рдкрд╣рд▓реЗ рдХреИрдлреАрди, рднрд╛рд░реА рднреЛрдЬрди рдФрд░ рд╕реНрдХреНрд░реАрди рд╕реЗ рдмрдЪреЗрдВред<br>4. рдЖрд░рд╛рдо: рд╕реЛрдиреЗ рд╕реЗ рдкрд╣рд▓реЗ рдПрдХ рдЖрд░рд╛рдорджрд╛рдпрдХ рджрд┐рдирдЪрд░реНрдпрд╛ рд╡рд┐рдХрд╕рд┐рдд рдХрд░реЗрдВ (рдкрдврд╝рдирд╛, рдирд╣рд╛рдирд╛)ред<br>5. рд╕рд▓рд╛рд╣: рдпрджрд┐ рдЕрдирд┐рджреНрд░рд╛ рд▓рдЧрд╛рддрд╛рд░ рдмрдиреА рд░рд╣рддреА рд╣реИ рдпрд╛ рдЖрдкрдХреЗ рджреИрдирд┐рдХ рдЬреАрд╡рди рдХреЛ рдкреНрд░рднрд╛рд╡рд┐рдд рдХрд░рддреА рд╣реИ, рддреЛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкреЗрд╢реЗрд╡рд░ рд╕реЗ рдмрд╛рдд рдХрд░реЗрдВред"
#         ]
#     },
#     "toothache": {
#         "symptoms": ["toothache", "gum pain", "sore tooth", "dental pain", "mouth pain", "daant dard", "masoodon mein dard", "рджрд╛рдВрдд рджрд░реНрдж", "рдорд╕реВрдбрд╝реЛрдВ рдореЗрдВ рджрд░реНрдж"],
#         "body_parts": ["mouth", "tooth", "gums", "munh", "daant", "masooda", "рдореБрдВрд╣", "рджрд╛рдВрдд", "рдорд╕реВрдбрд╝рд╛"],
#         "condition_name_en": "toothache",
#         "condition_name_hi": "рджрд╛рдВрдд рджрд░реНрдж",
#         "responses": [
#             "ЁЯдЦ *Toothache Relief (Basic First Aid):<br>1. Rinse: Rinse your mouth thoroughly with warm salt water.<br>2. Floss: Gently floss around the sore tooth to remove any trapped food.<br>3. Cold Compress: Apply a cold compress to the outside of your cheek.<br>4. Pain Relief: Use over-the-counter pain medication.<br>5. Urgent Care: **See a dentist immediately* to determine the cause and get proper treatment."
#         ],
#         "hindi_responses": [
#             "ЁЯдЦ *рджрд╛рдВрдд рджрд░реНрдж рд╕реЗ рд░рд╛рд╣рдд (рдмреБрдирд┐рдпрд╛рджреА рдкреНрд░рд╛рдердорд┐рдХ рдЙрдкрдЪрд╛рд░):<br>1. рдХреБрд▓реНрд▓рд╛: рдЕрдкрдиреЗ рдореБрдВрд╣ рдХреЛ рдЧрд░реНрдо рдирдордХ рдХреЗ рдкрд╛рдиреА рд╕реЗ рдЕрдЪреНрдЫреА рддрд░рд╣ рд╕реЗ рдХреБрд▓реНрд▓рд╛ рдХрд░реЗрдВред<br>2. рдлреНрд▓реЙрд╕: рдлрдВрд╕реЗ рд╣реБрдП рднреЛрдЬрди рдХреЛ рдирд┐рдХрд╛рд▓рдиреЗ рдХреЗ рд▓рд┐рдП рджрд░реНрдж рд╡рд╛рд▓реЗ рджрд╛рдВрдд рдХреЗ рдЪрд╛рд░реЛрдВ рдУрд░ рдзреАрд░реЗ рд╕реЗ рдлреНрд▓реЙрд╕ рдХрд░реЗрдВред<br>3. рдардВрдбрд╛ рд╕реЗрдХ: рдЕрдкрдиреЗ рдЧрд╛рд▓ рдХреЗ рдмрд╛рд╣рд░ рдардВрдбрд╛ рд╕реЗрдХ рд▓рдЧрд╛рдПрдВред<br>4. рджрд░реНрдж рд╕реЗ рд░рд╛рд╣рдд: рдУрд╡рд░-рдж-рдХрд╛рдЙрдВрдЯрд░ рджрд░реНрдж рдирд┐рд╡рд╛рд░рдХ рджрд╡рд╛ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред<br>5. рддрддреНрдХрд╛рд▓ рджреЗрдЦрднрд╛рд▓: рдХрд╛рд░рдг рдЬрд╛рдирдиреЗ рдФрд░ рдЙрдЪрд┐рдд рдЙрдкрдЪрд╛рд░ рдкрд╛рдиреЗ рдХреЗ рд▓рд┐рдП **рддреБрд░рдВрдд рдПрдХ рджрдВрдд рдЪрд┐рдХрд┐рддреНрд╕рдХ рд╕реЗ рдорд┐рд▓реЗрдВ*ред"
#         ]
#     },
#     "rashes": {
#         "symptoms": ["rash", "hives", "itchy skin", "red patches", "chakatte", "khujli", "laal daane", "рдЪрдХрддреНрддреЗ", "рдЦреБрдЬрд▓реА", "рд▓рд╛рд▓ рджрд╛рдиреЗ"],
#         "body_parts": ["skin", "tvacha", "рддреНрд╡рдЪрд╛"],
#         "condition_name_en": "skin rash or irritation",
#         "condition_name_hi": "рддреНрд╡рдЪрд╛ рдкрд░ рдЪрдХрддреНрддреЗ/рдЬрд▓рди",
#         "responses": [
#             "ЁЯдЦ *Rash Management (Basic Guidelines):*<br>1. Identify: Try to identify and eliminate the source of the irritation (soap, metal, plant).<br>2. Cool: Apply a cool, wet compress to the rash area.<br>3. Lotion: Use calamine lotion or an over-the-counter hydrocortisone cream.<br>4. Avoid Scratching: Do not scratch the rash, as this can lead to infection.<br>5. Urgent Care: Seek help if the rash is widespread, blistered, painful, or accompanied by fever."
#         ],
#         "hindi_responses": [
#             "ЁЯдЦ *рдЪрдХрддреНрддреЗ/рдЬрд▓рди рдкреНрд░рдмрдВрдзрди (рдмреБрдирд┐рдпрд╛рджреА рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢):*<br>1. рдкрд╣рдЪрд╛рдиреЗрдВ: рдЬрд▓рди рдХреЗ рд╕реНрд░реЛрдд (рд╕рд╛рдмреБрди, рдзрд╛рддреБ, рдкреМрдзрд╛) рдХреЛ рдкрд╣рдЪрд╛рдирдиреЗ рдФрд░ рд╕рдорд╛рдкреНрдд рдХрд░рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред<br>2. рдардВрдбрд╛: рдЪрдХрддреНрддреЗ рд╡рд╛рд▓реЗ рдХреНрд╖реЗрддреНрд░ рдкрд░ рдардВрдбрд╛, рдЧреАрд▓рд╛ рд╕реЗрдХ рд▓рдЧрд╛рдПрдВред<br>3. рд▓реЛрд╢рди: рдХреИрд▓рд╛рдорд╛рдЗрди рд▓реЛрд╢рди рдпрд╛ рдУрд╡рд░-рдж-рдХрд╛рдЙрдВрдЯрд░ рд╣рд╛рдЗрдбреНрд░реЛрдХреЛрд░реНрдЯрд┐рд╕реЛрди рдХреНрд░реАрдо рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред<br>4. рдЦреБрдЬрд▓реА рд╕реЗ рдмрдЪреЗрдВ: рдЪрдХрддреНрддреЗ рдХреЛ рдЦреБрдЬрд▓реА рди рдХрд░реЗрдВ, рдХреНрдпреЛрдВрдХрд┐ рдЗрд╕рд╕реЗ рд╕рдВрдХреНрд░рдордг рд╣реЛ рд╕рдХрддрд╛ рд╣реИред<br>5. рддрддреНрдХрд╛рд▓ рджреЗрдЦрднрд╛рд▓: рдпрджрд┐ рдЪрдХрддреНрддреЗ рд╡реНрдпрд╛рдкрдХ рд╣реИрдВ, рдЫрд╛рд▓реЗ рдкрдбрд╝ рдЧрдП рд╣реИрдВ, рджрд░реНрджрдирд╛рдХ рд╣реИрдВ, рдпрд╛ рдмреБрдЦрд╛рд░ рдХреЗ рд╕рд╛рде рд╣реИрдВ рддреЛ рд╕рд╣рд╛рдпрддрд╛ рд▓реЗрдВред"
#         ]
#     },
#     "insect bite": {
#         "symptoms": ["bite", "sting", "swollen bite", "bee sting", "mosquito bite", "keede ne kata", "macchar kata", "dank", "khujli", "sujan", "рдХреАрдбрд╝реЗ рдиреЗ рдХрд╛рдЯрд╛", "рдордЪреНрдЫрд░ рдХрд╛рдЯрд╛", "рдбрдВрдХ", "рд╕реВрдЬрди"],
#         "body_parts": ["skin", "arm", "leg", "tvacha", "рддреНрд╡рдЪрд╛"],
#         "condition_name_en": "insect bite or sting",
#         "condition_name_hi": "рдХреАрдЯ рдХрд╛ рдХрд╛рдЯрдирд╛/рдбрдВрдХ рдорд╛рд░рдирд╛",
#         "responses": [
#             "ЁЯдЦ *Insect Bite First Aid (CDC Guidelines):*<br>1. Remove Stinger: If stung by a bee, gently scrape out the stinger (do not pinch it).<br>2. Clean: Wash the area gently with soap and water.<br>3. Reduce Swelling: Apply ice or a cold compress to the site.<br>4. Relieve Itch: Use an anti-itch cream or oral antihistamine.<br>5. Urgent Care: Seek emergency help for signs of a severe allergic reaction (anaphylaxis) like breathing difficulty or throat swelling."
#         ],
#         "hindi_responses": [
#             "ЁЯдЦ *рдХреАрдЯ рдХреЗ рдХрд╛рдЯрдиреЗ/рдбрдВрдХ рдорд╛рд░рдиреЗ рдкрд░ рдкреНрд░рд╛рдердорд┐рдХ рдЙрдкрдЪрд╛рд░ (CDC рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢):*<br>1. рдбрдВрдХ рдирд┐рдХрд╛рд▓реЗрдВ: рдпрджрд┐ рдордзреБрдордХреНрдЦреА рдиреЗ рдбрдВрдХ рдорд╛рд░рд╛ рд╣реИ, рддреЛ рдбрдВрдХ рдХреЛ рдзреАрд░реЗ рд╕реЗ рдЦреБрд░рдЪ рдХрд░ рдирд┐рдХрд╛рд▓ рджреЗрдВред<br>2. рд╕рд╛рдл рдХрд░реЗрдВ: рдХреНрд╖реЗрддреНрд░ рдХреЛ рд╕рд╛рдмреБрди рдФрд░ рдкрд╛рдиреА рд╕реЗ рдзреАрд░реЗ рд╕реЗ рдзреЛрдПрдВред<br>3. рд╕реВрдЬрди рдХрдо рдХрд░реЗрдВ: рдЬрдЧрд╣ рдкрд░ рдмрд░реНрдл рдпрд╛ рдардВрдбрд╛ рд╕реЗрдХ рд▓рдЧрд╛рдПрдВред<br>4. рдЦреБрдЬрд▓реА рд╕реЗ рд░рд╛рд╣рдд: рдЦреБрдЬрд▓реА-рд░реЛрдзреА рдХреНрд░реАрдо рдпрд╛ рдореМрдЦрд┐рдХ рдПрдВрдЯреАрд╣рд┐рд╕реНрдЯрд╛рдорд╛рдЗрди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред<br>5. рддрддреНрдХрд╛рд▓ рджреЗрдЦрднрд╛рд▓: рдЧрдВрднреАрд░ рдПрд▓рд░реНрдЬреА рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ (рдПрдирд╛рдлрд┐рд▓реЗрдХреНрд╕рд┐рд╕) рдХреЗ рд▓рдХреНрд╖рдгреЛрдВ, рдЬреИрд╕реЗ рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдореЗрдВ рдХрдард┐рдирд╛рдИ рдпрд╛ рдЧрд▓реЗ рдореЗрдВ рд╕реВрдЬрди, рдХреЗ рд▓рд┐рдП рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рд╣рд╛рдпрддрд╛ рд▓реЗрдВред"
#         ]
#     },
#     "anxiety": {
#         "symptoms": ["anxiety", "stress", "panic", "worried", "nervous", "tanaav", "chinta", "ghabrahat", "рддрдирд╛рд╡", "рдЪрд┐рдВрддрд╛", "рдШрдмрд░рд╛рд╣рдЯ"],
#         "body_parts": ["mind", "head", "body", "dimag", "sir", "sharir", "рджрд┐рдорд╛рдЧ", "рд╕рд┐рд░", "рд╢рд░реАрд░"],
#         "condition_name_en": "anxiety or stress",
#         "condition_name_hi": "рдЪрд┐рдВрддрд╛ рдпрд╛ рддрдирд╛рд╡",
#         "responses": [
#             "ЁЯдЦ *Managing Stress & Anxiety (Basic Guidelines):*<br>1. Breathe: Practice deep breathing exercises to calm your nervous system.<br>2. Connect: Talk to a friend, family member, or mental health professional.<br>3. Move: Regular physical activity can significantly reduce stress.<br>4. Limit News: Reduce exposure to stressful news or social media.<br>5. Urgent Care: If you feel overwhelmed or are in crisis, please contact a helpline or professional immediately."
#         ],
#         "hindi_responses": [
#             "ЁЯдЦ *рддрдирд╛рд╡ рдФрд░ рдЪрд┐рдВрддрд╛ рдХрд╛ рдкреНрд░рдмрдВрдзрди (рдмреБрдирд┐рдпрд╛рджреА рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢):*<br>1. рд╕рд╛рдВрд╕ рд▓реЗрдВ: рдЕрдкрдиреЗ рддрдВрддреНрд░рд┐рдХрд╛ рддрдВрддреНрд░ рдХреЛ рд╢рд╛рдВрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЧрд╣рд░реА рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдХрд╛ рдЕрднреНрдпрд╛рд╕ рдХрд░реЗрдВред<br>2. рдЬреБрдбрд╝реЗрдВ: рдХрд┐рд╕реА рдорд┐рддреНрд░, рдкрд░рд┐рд╡рд╛рд░ рдХреЗ рд╕рджрд╕реНрдп рдпрд╛ рдорд╛рдирд╕рд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкреЗрд╢реЗрд╡рд░ рд╕реЗ рдмрд╛рдд рдХрд░реЗрдВред<br>3. рд╕рдХреНрд░рд┐рдп рд░рд╣реЗрдВ: рдирд┐рдпрдорд┐рдд рд╢рд╛рд░реАрд░рд┐рдХ рдЧрддрд┐рд╡рд┐рдзрд┐ рддрдирд╛рд╡ рдХреЛ рдХрд╛рдлреА рдХрдо рдХрд░ рд╕рдХрддреА рд╣реИред<br>4. рд╕рдорд╛рдЪрд╛рд░ рд╕реАрдорд┐рдд рдХрд░реЗрдВ: рддрдирд╛рд╡рдкреВрд░реНрдг рд╕рдорд╛рдЪрд╛рд░ рдпрд╛ рд╕реЛрд╢рд▓ рдореАрдбрд┐рдпрд╛ рдХрд╛ рдЬреЛрдЦрд┐рдо рдХрдо рдХрд░реЗрдВред<br>5. рддрддреНрдХрд╛рд▓ рджреЗрдЦрднрд╛рд▓: рдпрджрд┐ рдЖрдк рдЕрднрд┐рднреВрдд рдорд╣рд╕реВрд╕ рдХрд░рддреЗ рд╣реИрдВ рдпрд╛ рд╕рдВрдХрдЯ рдореЗрдВ рд╣реИрдВ, рддреЛ рдХреГрдкрдпрд╛ рддреБрд░рдВрдд рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди рдпрд╛ рдкреЗрд╢реЗрд╡рд░ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред"
#         ]
#     }
# }

# Commented out IPython magic to ensure Python compatibility.
# %%writefile requirements.txt
# streamlit
# pyjwt
# langdetect
# pandas
# plotly

# Commented out IPython magic to ensure Python compatibility.
# %%writefile Dockerfile
# # Use the official Python base image
# FROM python:3.10-slim
# 
# # Set the working directory in the container
# WORKDIR /app
# 
# # Copy the requirements file and install dependencies
# COPY requirements.txt .
# RUN pip install --no-cache-dir -r requirements.txt
# 
# # Copy the rest of the application code (including kb.json)
# COPY . .
# 
# # Expose the port Streamlit runs on
# EXPOSE 8501
# 
# # Set health check for Streamlit
# HEALTHCHECK CMD streamlit healthcheck
# 
# # The command to run the Streamlit app
# ENTRYPOINT ["streamlit", "run", "app.py", "--server.port=8501", "--server.address=0.0.0.0"]

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import jwt, datetime, json, os, re
# from hashlib import sha256
# from collections import defaultdict, Counter
# import pandas as pd
# import plotly.express as px # Import Plotly for Pie Chart
# 
# # --- CONFIGURATION ---
# SECRET_KEY = "mysecretkey"
# DB_FILE = "users.json"
# KB_FILE = "kb.json" # KB is now external
# LOG_FILE = "chat_logs.json" # For feedback and analytics
# ADMIN_EMAIL = "admin@app.com" # Designate your admin email
# 
# # Use wide layout for dashboard
# st.set_page_config(page_title="Health Wellness Chatbot", layout="wide")
# 
# # --- NEW THEME: Red / Dark Blue / Light Blue / White ---
# st.markdown("""
# <style>
# /* Base UI Styling */
# body { background: ##f3f8fe; } /* Dark Blue */
# .stApp { background-color: ##f3f8fe; color: ##000000; } /* White Text */
# 
# /* Headings and Labels */
# h1, h2, h3, h4, h5, h6, label,
# .stSidebar h1, .stSidebar h2, .stSidebar h3 {
#     color: #80BFFF !important; /* Light Blue Accent */
# }
# h1 { color: ##000000 !important; text-align: center; } /* Main Title White */
# h2, h3 { /* Subheaders */
#      border-bottom: 2px solid #003366; /* Mid Blue */
#      padding-bottom: 5px;
#      color: ##000000 !important; /* White */
#      margin-top: 1.5rem; /* Add space above subheaders */
# }
# 
# /* Sidebar */
# .stSidebar { background-color: #001024 !important; border-right: 1px solid #003366; } /* Even Darker Blue */
# .stSidebar .stButton>button {
#     background-color: #003366; /* Mid Blue */
#     color: ##000000; /* White Text */
#     border: 1px solid #80BFFF; /* Light Blue Border */
#     width: 100%; margin-bottom: 5px; border-radius: 4px;
# }
# .stSidebar .stButton>button:hover {
#     background-color: #80BFFF; /* Light Blue */
#     color: #001A3A; /* Dark Blue Text */
#     border-color: ##000000;
# }
# 
# /* Input Boxes (Forms, Chat Input) */
# .stTextInput>div>div>input,
# div[data-testid="stForm"] input[type="text"],
# div[data-testid="stForm"] input[type="password"],
# div[data-testid="stForm"] textarea {
#     background-color: #003366; /* Mid Blue */
#     color: #FFFFFF; /* White Text */
#     border: 1px solid #80BFFF; /* Light Blue Border */
#     border-radius: 4px; padding: 10px;
# }
# div[data-testid="stForm"] div[data-testid="stTextInput"] > div:nth-child(2) > div:nth-child(1) > input { height: 48px; } /* Chat Input */
# .stTextInput>div>div>input:focus, /* Focus effect */
# div[data-testid="stForm"] input[type="text"]:focus,
# div[data-testid="stForm"] input[type="password"]:focus,
# div[data-testid="stForm"] textarea:focus { border-color: #FFFFFF; box-shadow: 0 0 0 1px #FFFFFF; }
# 
# /* General Buttons (Main Area) */
# .stButton>button {
#     background-color: #003366; color: #FFFFFF; font-weight: bold; border-radius: 4px;
#     border: 1px solid #80BFFF; padding: 8px 18px; height: 38px; line-height: 20px;
# }
# .stButton>button:hover { background-color: #80BFFF; color: #001A3A; border-color: #FFFFFF; }
# 
# /* Primary Button (Admin Save, Profile Save) */
# .stButton>button[kind="primary"], div[data-testid="stForm"] button.st-emotion-cache-19rxjzo {
#      background-color: #80BFFF !important; color: #001A3A !important; border: 1px solid #80BFFF !important;
# }
# .stButton>button[kind="primary"]:hover, div[data-testid="stForm"] button.st-emotion-cache-19rxjzo:hover {
#       background-color: #AAD4FF !important; border-color: #FFFFFF !important; color: #001A3A !important;
# }
# /* Danger Button (Admin Delete) */
# button.st-emotion-cache-1uj9mc { background-color: #DC3545 !important; color: #FFFFFF !important; border: none !important; }
# button.st-emotion-cache-1uj9mc:hover { background-color: #F87979 !important; }
# 
# /* Chat Bubbles */
# .chat-bubble { padding: 10px 15px; margin: 8px 0; border-radius: 15px; max-width: 80%; word-wrap: break-word; font-size: 16px; line-height: 1.5; }
# .bot-msg { background-color: #003366; color: #FFFFFF; border-top-left-radius: 0; float: left; clear: both; }
# .user-msg { background-color: #80BFFF; color: #001A3A; border-top-right-radius: 0; float: right; clear: both; }
# 
# /* Chat Send Button */
# div[data-testid="stForm"] button.st-emotion-cache-uss2im { /* More specific selector for send */
#     background-color: #003366 !important; color: #FFFFFF !important; height: 48px !important; width: 100% !important;
#     border-radius: 4px !important; border: 1px solid #80BFFF !important; font-size: 20px !important; padding: 0 !important; margin-top: -1px;
# }
# div[data-testid="stForm"] button.st-emotion-cache-uss2im:hover { background-color: #80BFFF !important; border-color: #FFFFFF !important; color: #001A3A !important; }
# 
# /* Alignment & Spacing */
# div[data-testid="stExpander"] div[role="button"] { padding-left: 0; } /* Align expander header */
# .stTabs [data-baseweb="tab-list"] { background-color: #001A3A; } /* Dark blue tab header */
# .stTabs [data-baseweb="tab"] { background-color: #003366; color: ##000000; border-radius: 4px 4px 0 0; }
# .stTabs [data-baseweb="tab--selected"] { background-color: #001A3A; color: #80BFFF; }
# hr { border-top: 1px solid #003366; margin: 1rem 0; } /* Divider color */
# div[data-testid="stVerticalBlock"] > div { margin-bottom: 1rem; } /* Consistent vertical spacing */
# 
# /* BOT ONLINE/OFFLINE STATUS */
# .status-indicator { display: inline-block; width: 10px; height: 10px; border-radius: 50%; margin-right: 8px; }
# .status-online { background-color: #80BFFF !important; } /* Light Blue online */
# .status-offline { background-color: #DC3545 !important; } /* Red offline */
# .bot-header { font-size: 1.5rem; font-weight: 600; color: ##000000 !important; display: flex; align-items: center; margin-bottom: 1rem; }
# 
# /* Keyword Buttons - ensure they fill columns */
# div[data-testid="stHorizontalBlock"] .stButton>button {
#     background-color: #003366; color: ##000000; border: 1px solid #80BFFF; height: 40px; font-weight: normal; width: 100%;
# }
# div[data-testid="stHorizontalBlock"] .stButton>button:hover { background-color: #80BFFF; color: #001A3A; border: 1px solid #000000; }
# 
# /* Feedback Buttons */
# div.feedback-button-container { margin-top: -10px; margin-left: 10px; margin-bottom: 10px; float: left; clear: both; }
# div.feedback-button-container .stButton>button {
#     background-color: transparent; border: none; height: 30px; width: 30px; font-weight: bold; padding: 0; font-size: 1.3em;
# }
# /* Green Thumb */
# div.feedback-button-container .stButton:nth-child(1)>button { color: #28a745 !important; }
# div.feedback-button-container .stButton:nth-child(1)>button:hover { color: #34D399 !important; } /* Lighter green */
# /* Red Thumb */
# div.feedback-button-container .stButton:nth-child(2)>button { color: #DC3545 !important; }
# div.feedback-button-container .stButton:nth-child(2)>button:hover { color: #F87979 !important; } /* Lighter red */
# 
# span.feedback-received { color: #AAAAAA; font-size: 0.8em; float: left; clear: both; margin-left: 10px; margin-top: 5px; }
# 
# /* Admin Dashboard Specific Styles */
# div[data-testid="stMetric"] { background-color: #003366; border-radius: 8px; padding: 1rem; border: 1px solid #80BFFF; }
# div[data-testid="stMetric"] label { color: #AAAAAA !important; }
# div[data-testid="stMetric"] div.st-emotion-cache-1gfitym { color: ##000000 !important; }
# div[data-testid="stMetric"] div.st-emotion-cache-1gfitym > div { color: #000000 !important; }
# div.admin-list-container { background-color: #003366; padding: 1rem; border-radius: 8px; border: 1px solid #80BFFF; max-height: 250px; overflow-y: auto; }
# div.admin-list-container h3 { margin-top: 0; margin-bottom: 0.5rem; color: #000000 !important; }
# div.admin-list-container ul { list-style: none; padding: 0; margin: 0; }
# div.admin-list-container li { padding: 0.3rem 0; border-bottom: 1px solid #001A3A; display: flex; justify-content: space-between; align-items: center; color: #FFFFFF; }
# div.admin-list-container li:last-child { border-bottom: none; }
# div.admin-list-container span.feedback-icon-up { color: #28a745; font-weight: bold; } /* Green thumb */
# div.admin-list_container span.feedback_icon_down { color: #DC3545; font_weight: bold; } /* Red thumb */
# div.admin_list_container button { margin_top: 10px; }
# 
# /* Plotly Pie Chart Background */
# .plotly-graph-div { background: transparent !important; }
# /* Ensure JSON text is readable */
# div[data-testid="stJson"] pre code { color: #000000 !important; } /* White Text */
# 
# </style>
# """, unsafe_allow_html=True)
# 
# 
# # --- PROFILE SCHEMA (Unchanged) ---
# PROFILE_SCHEMA = { "name": {"type": "text", "label": "Full Name", "default": ""}, "age": {"type": "select", "label": "Age Group", "options": ["18тАУ25", "25тАУ35", "35тАУ45", "45+"], "default": "18тАУ25"}, "gender": {"type": "select", "label": "Gender", "options": ["Male", "Female", "Other"], "default": "Male"}, "language": {"type": "select", "label": "Preferred Language", "options": ["English", "Hindi"], "default": "English"}, }
# 
# # --- KNOWLEDGE BASE (External) ---
# def load_kb():
#     if not os.path.exists(KB_FILE): st.error(f"{KB_FILE} not found!"); return {}
#     try:
#         with open(KB_FILE, 'r', encoding='utf-8') as f: return json.load(f)
#     except Exception as e: st.error(f"Error loading KB: {e}."); return {}
# def save_kb(kb_data):
#     global KB  # Correctly declare global at the start
#     global ENTITY_MAP # Also declare ENTITY_MAP global here
#     try:
#         with open(KB_FILE, 'w', encoding='utf-8') as f: json.dump(kb_data, f, indent=4, ensure_ascii=False)
#         # Update ENTITY_MAP after saving KB
#         ENTITY_MAP = defaultdict(list)
#         for c, d in KB.items():
#             for s in d.get("symptoms", []): ENTITY_MAP["symptom"].append(s)
#             for p in d.get("body_parts", []): ENTITY_MAP["body_part"].append(p)
#         return True
#     except Exception as e: st.error(f"Failed to save KB: {e}"); return False
# KB = load_kb()
# ENTITY_MAP = defaultdict(list)
# if KB:
#     for cond, data in KB.items():
#         for sym in data.get("symptoms", []): ENTITY_MAP["symptom"].append(sym)
#         for part in data.get("body_parts", []): ENTITY_MAP["body_part"].append(part)
# else: st.warning("Knowledge Base empty/not loaded.")
# 
# # --- LOGGING & ANALYTICS ---
# def load_logs():
#     if not os.path.exists(LOG_FILE) or os.path.getsize(LOG_FILE) == 0: return []
#     try:
#         with open(LOG_FILE, 'r', encoding='utf-8') as f: return json.load(f)
#     except json.JSONDecodeError: st.warning(f"Bad {LOG_FILE}. Starting empty."); return []
# def save_logs(logs):
#     try:
#         with open(LOG_FILE, 'w', encoding='utf-8') as f: json.dump(logs, f, indent=4, ensure_ascii=False)
#     except Exception as e: st.error(f"Failed to save logs: {e}")
# def log_chat(email, query, response, resp_id):
#     logs = load_logs(); main_resp = response.split("<br><br>---<br>")[0]
#     logs.append({"id": resp_id, "email": email, "query": query, "response": main_resp, "feedback": "none", "comment": "", "timestamp": datetime.datetime.utcnow().isoformat()})
#     save_logs(logs)
# def log_feedback(resp_id, fb_type, comment=""):
#     logs = load_logs(); found = False
#     for log in logs:
#         if log.get("id") == resp_id: log["feedback"] = fb_type; log["comment"] = comment if comment else log["comment"]; found = True; break
#     if found: save_logs(logs)
#     else: st.error("Error logging feedback: Log ID not found.")
# def get_frequent_keywords(email):
#     logs = load_logs(); queries = [log['query'] for log in logs if log['email'] == email]
#     defaults = ["ЁЯдТ Headache", "ЁЯдв Flu", "ЁЯФе Burns", "ЁЯШ┤ Sleep", "ЁЯзШ Anxiety"]
#     if not queries: return defaults
#     words = [w for q in queries for w in re.findall(r'\b\w{4,}\b', q.lower())]
#     stops = {"what", "when", "tell", "about", "have", "with", "from", "mein", "kya", "kaise", "this", "that"}
#     filtered = [w for w in words if w not in stops]
#     if not filtered: return defaults
#     top_5 = [w for w, c in Counter(filtered).most_common(5)]
#     emojis = {"headache": "ЁЯдТ", "flu": "ЁЯдв", "burns": "ЁЯФе", "sleep": "ЁЯШ┤", "anxiety": "ЁЯзШ", "cough": "ЁЯТи", "cold": "ЁЯдз", "fever": "ЁЯМб", "pain": "ЁЯТе", "cut": "ЁЯй╣"}
#     formatted = [f"{emojis.get(w, 'ЁЯФН')} {w.title()}" for w in top_5]
#     if len(formatted) < 5:
#         existing = {kw.split(" ", 1)[-1].lower() for kw in formatted}
#         needed = 5 - len(formatted); added = 0
#         for d_kw in defaults:
#              if added >= needed: break
#              if d_kw.split(" ", 1)[-1].lower() not in existing: formatted.append(d_kw); added += 1
#     return formatted[:5]
# 
# # --- AUTH & USER HELPERS ---
# def load_users():
#     if not os.path.exists(DB_FILE) or os.path.getsize(DB_FILE) == 0:
#         print(f"User file {DB_FILE} not found. Creating admin."); admin_hash = hash_pw("admin123"); prof = {k: v["default"] for k, v in PROFILE_SCHEMA.items()}
#         users = {ADMIN_EMAIL: {"password": admin_hash, "profile": prof}}; save_users(users); return users
#     try:
#         with open(DB_FILE, 'r') as f: return json.load(f)
#     except json.JSONDecodeError: st.error("User DB error."); return {}
# def save_users(users):
#     try:
#         with open(DB_FILE, 'w') as f: json.dump(users, f, indent=4)
#     except Exception as e: st.error(f"Failed save users: {e}")
# def hash_pw(pw): return sha256(pw.encode()).hexdigest()
# def create_token(email): payload = {"email": email,"exp": datetime.datetime.utcnow()+datetime.timedelta(hours=8)}; return jwt.encode(payload, SECRET_KEY, algorithm="HS256")
# def get_user_from_token():
#     token = st.session_state.get("token")
#     if not token: return None
#     try:
#         decoded = jwt.decode(token, SECRET_KEY, algorithms=["HS256"], options={"verify_exp": True}); return decoded["email"]
#     except (jwt.ExpiredSignatureError, jwt.InvalidTokenError) as e:
#         st.error(f"Session Error: {e}. Please log in."); keys = list(st.session_state.keys())
#         [st.session_state.pop(k, None) for k in keys]; st.rerun(); return None
# 
# # --- NLU & RESPONSE LOGIC ---
# def extract_entities(text, msg):
#     text_lower = text.lower(); extracted = {"symptom": set(), "body_part": set()}
#     global ENTITY_MAP;
#     if not ENTITY_MAP: return extracted
#     for etype, kwds in ENTITY_MAP.items():
#         for kwd in kwds:
#             kp = False
#             if kwd.isascii():
#                 if re.search(r'\b' + re.escape(kwd) + r'\b', text_lower): kp = True
#             elif kwd in msg: kp = True
#             if kp: extracted[etype].add(kwd)
#     if not extracted["body_part"]:
#         for sym in extracted["symptom"]:
#             if sym in ["fever", "dehydration", "insomnia", "bukhar", "paani ki kami", "anidra", "рдмреБрдЦрд╛рд░", "рдкрд╛рдиреА рдХреА рдХрдореА", "рдЕрдирд┐рджреНрд░рд╛", "sleep", "рдиреАрдВрдж", "anxiety", "рдЪрд┐рдВрддрд╛", "рддрдирд╛рд╡"]:
#                 extracted["body_part"].add("body"); break
#     return extracted
# def generate_disclaimer(name_en, name_hi, is_hindi):
#     hr = "border-top: 1px dashed #80BFFF; margin: 10px 0;" # Light Blue dash
#     note_hi = f"Note: рдпрд╣ *{name_hi}* рдЬрд╛рдирдХрд╛рд░реА рдХреЗрд╡рд▓ рдмреБрдирд┐рдпрд╛рджреА рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдХреЗ рд▓рд┐рдП рд╣реИред<br>рдпрджрд┐ рд▓рдХреНрд╖рдг рдмрдиреЗ рд░рд╣рддреЗ рд╣реИрдВ рдпрд╛ рдмрд┐рдЧрдбрд╝ рдЬрд╛рддреЗ рд╣реИрдВ рддреЛ рдбреЙрдХреНрдЯрд░ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВ."
#     note_en = f"Note: This *{name_en.title().replace('/', ' or ')}* information is for basic guidance only.<br>Consult a healthcare provider if symptoms persist or worsen."
#     return f"<hr style='{hr}'>{note_hi}" if is_hindi else f"<hr style='{hr}'>{note_en}"
# def get_bot_response(msg):
#     global KB, ENTITY_MAP
#     KB = load_kb();
#     if not KB: return "ЁЯдЦ Sorry, KB unavailable."
#     ENTITY_MAP = defaultdict(list)
#     for c, d in KB.items():
#         for s in d.get("symptoms", []): ENTITY_MAP["symptom"].append(s)
#         for p in d.get("body_parts", []): ENTITY_MAP["body_part"].append(p)
# 
#     msg_lower = msg.lower()
#     HINDI_KW = ["namaste", "hindi", "sir dard", "bukhar", "khansi", "pet", "dard", "moch", "matli", "ulti", "jaln", "kamar", "peeth", "jukaam", "sardi", "gala", "khujli", "dast", "kabz", "pyas", "chot", "sujan", "daant", "tanaav", "chinta", "рдирдорд╕реНрддреЗ", "рдирдорд╕реНрдХрд╛рд░", "рд╣рд┐рдВрджреА", "рд╕рд┐рд░рджрд░реНрдж", "рдорд╛рдерд╛ рджрд░реНрдж", "рд╕рд┐рд░ рдореЗрдВ рджрд░реНрдж", "рд╕рд┐рд░", "рдЧрд░реНрджрди", "рдорд╛рдЗрдЧреНрд░реЗрди", "рддреЗрдЬ рд╕рд┐рд░рджрд░реНрдж", "рдЖрдВрдЦ", "рдмреБрдЦрд╛рд░", "рддрд╛рдкрдорд╛рди", "рдЬреНрд╡рд░", "рддреЗрдЬрд╝ рдмреБрдЦрд╛рд░", "рд╢рд░реАрд░", "рдЦрд╛рдВрд╕реА", "рд╕реВрдЦреА рдЦрд╛рдВрд╕реА", "рдЧреАрд▓реА рдЦрд╛рдВрд╕реА", "рд╕рд░реНрджреА", "рдЬреБрдХрд╛рдо", "рдирд╛рдХ рдмрд╣рдирд╛", "рдмрдВрдж рдирд╛рдХ", "gala", "рд╕реАрдирд╛", "рдирд╛рдХ", "рдЧрд▓реЗ рдореЗрдВ рджрд░реНрдж", "рдЦрд░рд╛рд╢", "рдЧрд▓рд╛ рдЦрд░рд╛рдм", "рдПрд▓рд░реНрдЬреА", "рдЫреАрдВрдХ", "рдЦреБрдЬрд▓реА", "рдЖрдВрдЦ рдореЗрдВ рдЦреБрдЬрд▓реА", "рддреНрд╡рдЪрд╛", "рдорддрд▓реА", "рдЙрд▓реНрдЯреА", "рдкреЗрдЯ рдЦрд░рд╛рдм", "рдЬреА рдордЪрд▓рдирд╛", "рдкреЗрдЯ рджрд░реНрдж", "рдкреЗрдЯ", "рджрд╕реНрдд", "рдкреЗрдЯ рдореЗрдВ рдорд░реЛрдбрд╝", "рд▓реВрдЬ рдореЛрд╢рди", "рдХрдмреНрдЬ", "рдкреЗрдЯ рд╕рд╛рдл рдирд╣реАрдВ рд╣реЛрдирд╛", "рдкреНрдпрд╛рд╕", "рдкрд╛рдиреА рдХреА рдХрдореА", "рд╕реВрдЦрд╛ рдореБрдВрд╣", "рдЪрдХреНрдХрд░", "рдореБрдВрд╣", "рдзреВрдк рд╕реЗ рдЬрд▓рди", "рдЬрд▓рдирд╛", "рдЫрд╛рд▓реЗ", "рд▓рд╛рд▓ рддреНрд╡рдЪрд╛", "рдЪреЛрдЯ", "рдЬрд╝рдЦреНрдо", "рдЦреВрди рдмрд╣рдирд╛", "рдХрдЯрдирд╛", "рдЙрдВрдЧрд▓реА", "рд╣рд╛рде", "рдкреИрд░", "рд╕рд┐рд░ рдкрд░ рдЪреЛрдЯ", "рдЪрдХреНрдХрд░ рдЖрдирд╛", "рджрд░реНрдж", "рдореЛрдЪ", "рд╕реВрдЬрди", "рдЯрдЦрдирд╛", "рдШреБрдЯрдирд╛", "рдХрд▓рд╛рдИ", "рдЬреЛрдбрд╝", "рдорд╛рдВрд╕рдкреЗрд╢реА", "рдХрдорд░ рджрд░реНрдж", "рдкреАрда рдореЗрдВ рджрд░реНрдж", "рдХрдорд░", "рдкреАрда", "рдиреАрдВрдж рдирд╣реАрдВ рдЖрдирд╛", "рдЕрдирд┐рджреНрд░рд╛", "рдердХрд╛рди", "daant dard", "masoodon mein dard", "рджрд╛рдВрдд рджрд░реНрдж", "рдорд╕реВрдбрд╝реЛрдВ рдореЗрдВ рджрд░реНрдж", "рджрд╛рдВрдд", "рдорд╕реВрдбрд╝рд╛", "рдЪрдХрддреНрддреЗ", "рд▓рд╛рд▓ рджрд╛рдиреЗ", "рдХреАрдбрд╝реЗ рдиреЗ рдХрд╛рдЯрд╛", "рдордЪреНрдЫрд░ рдХрд╛рдЯрд╛", "рдбрдВрдХ", "рдХрд╛рди", "flu", "рдиреАрдВрдж", "рдЪрд┐рдВрддрд╛", "рддрдирд╛рд╡"]
#     is_hindi = any(h in msg_lower for h in HINDI_KW if h.isascii()) or any(h in msg for h in HINDI_KW if not h.isascii())
#     greetings = {"рдирдорд╕реНрддреЗ", "рдирдорд╕реНрдХрд╛рд░", "hi", "hello", "hey", "namaste", "start"}; farewells = {"bye", "goodbye", "thanks", "thank you", "dhanyawad", "shukriya", "рдзрдиреНрдпрд╡рд╛рдж", "рд╢реБрдХреНрд░рд┐рдпрд╛"}
#     if msg_lower in greetings or any(g in msg for g in greetings if not g.isascii()): return "ЁЯдЦ рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ рдХрд▓реНрдпрд╛рдг рд╕рд╣рд╛рдпрдХ рд╣реВрдБред" if is_hindi else "ЁЯдЦ Hello! IтАЩm your Wellness Assistant."
#     if msg_lower in farewells or any(f in msg for f in farewells if not f.isascii()): return "ЁЯдЦ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рд╕реБрд░рдХреНрд╖рд┐рдд рд░рд╣реЗрдВ!" if is_hindi else "ЁЯдЦ You're welcome! Stay safe!"
# 
#     not_found = "ЁЯдЦ рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдореЗрд░реЗ рдкрд╛рд╕ рдЗрд╕ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдХрд╛рд░реА рдирд╣реАрдВ рд╣реИ..." if is_hindi else "ЁЯдЦ Sorry, I don't have information on that..."
#     res_key = "hindi_responses" if is_hindi else "responses"
#     entities = extract_entities(msg_lower, msg); found = entities["symptom"].union(entities["body_part"])
#     match, score = None, 0
#     q_map = {"burns": "sunburn/burn", "sleep": "insomnia", "anxiety": "anxiety", "flu": "cough/cold"}; mapped_key = q_map.get(msg_lower)
#     if mapped_key and mapped_key in KB: match, score = mapped_key, 100
#     else:
#         for c, d in KB.items():
#             kwds = set(d.get("symptoms", []) + d.get("body_parts", [])); s = len(found.intersection(kwds))
#             if s > score: score, match = s, c
#             elif s == score and match:
#                 if c in ["migraine", "minor head injury"] and match in ["headache", "fever"]: match = c
#                 elif len(c) > len(match) and match not in ["migraine", "minor head injury"]: match = c
#     if match and res_key in KB[match]:
#         s_list=list(entities['symptom']); p_list=list(entities['body_parts']) # Corrected to use body_parts from KB
#         nlu_p = f"Part(s): *{', '.join(p for p in p_list if p != 'body')}" if p_list and p_list != ["body"] else "Part(s): *None"
#         nlu_s = f"Symptom(s): *{', '.join(s_list)}" if s_list else "Symptom(s): *None"
#         nlu = f"<br><br>---<br>ЁЯФН Analysis:<br>{nlu_s}<br>{nlu_p}"
#         r_list = KB[match].get(res_key, []); r_txt = r_list[0] if r_list else not_found
#         disc = generate_disclaimer(KB[match]["condition_name_en"], KB[match]["condition_name_hi"], is_hindi)
#         return r_txt + nlu + disc
#     return r_txt + nlu + disc if match else not_found # Return NLU even if no match found
# 
# # --- VALIDATION ---
# def validate_email(e): return re.match(r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", e)
# def validate_password(p): return len(p) >= 6
# 
# # ==================================================================
# # --- UPDATED ADMIN DASHBOARD FUNCTION (Multi-column, Pie Chart, Colors, Management Features) ---
# # ==================================================================
# def show_admin_dashboard():
#     st.header("тЬи Admin Dashboard")
#     if st.button("тмЕ Back to Chat"): st.session_state.show_admin = False; st.rerun()
# 
#     # Load data
#     logs_data = load_logs()
#     df = pd.DataFrame(logs_data) if logs_data else pd.DataFrame()
#     if not df.empty and 'timestamp' in df.columns:
#         try:
#             df['timestamp'] = pd.to_datetime(df['timestamp'], errors='coerce')
#             df.dropna(subset=['timestamp'], inplace=True)
#         except Exception: df = pd.DataFrame()
# 
#     # --- Tabs for Dashboard and Management ---
#     dashboard_tab, kb_manage_tab, user_manage_tab, feedback_tab = st.tabs(["ЁЯУК Dashboard", "ЁЯУЪ Manage KB", "ЁЯСд Manage Users", "ЁЯТм Feedback"])
# 
#     with dashboard_tab:
#         # --- Row 1: Metrics & KB Overview ---
#         st.subheader("ЁЯУК Usage Statistics")
#         global KB
#         t_queries = len(df); f_counts = df['feedback'].value_counts() if 'feedback' in df.columns else pd.Series()
#         pos_fb = f_counts.get('up', 0); neg_fb = f_counts.get('down', 0); t_rated = pos_fb + neg_fb
#         fb_score = (pos_fb / t_rated * 100) if t_rated > 0 else 0
#         all_users = load_users()
#         t_users = len(all_users) - (1 if ADMIN_EMAIL in all_users else 0) # Exclude admin from user count
#         t_kb = len(KB)
#         m_col1, m_col2, m_col3, m_col4 = st.columns(4) # Added more columns for metrics
#         with m_col1: st.metric("Total Users", t_users)
#         with m_col2: st.metric("Health Topics (KB)", t_kb)
#         with m_col3: st.metric("Queries Handled", t_queries)
#         with m_col4: st.metric("Positive Feedback", f"{fb_score:.1f}%", f"{t_rated} rated")
# 
#         # --- Row 2: Trends & Recent Feedback ---
#         col3, col4 = st.columns([2, 1])
#         with col3:
#             st.subheader("ЁЯУИ Query Trends");
#             if df.empty or 'timestamp' not in df.columns or df['timestamp'].isnull().all(): st.caption("No trend data.")
#             else:
#                 try:
#                      # Group by day and count queries
#                      trends = df.set_index('timestamp').resample('D')['query'].count()
#                      if not trends.empty: st.line_chart(trends, color="#80BFFF") # Light Blue line
#                      else: st.caption("No queries logged.")
#                 except Exception as e: st.caption(f"Chart error: {e}")
#         with col4:
#             st.subheader("ЁЯТм Recent Feedback"); st.markdown('<div class="admin-list-container">', unsafe_allow_html=True)
#             if df.empty or 'feedback' not in df.columns: st.caption("No feedback.")
#             else:
#                 fb_df = df[df['feedback'] != 'none'].sort_values('timestamp', ascending=False).head(5)
#                 if fb_df.empty: st.caption("No rated feedback.")
#                 else:
#                     st.markdown("<ul>", unsafe_allow_html=True)
#                     for i, r in fb_df.iterrows():
#                         # Use actual thumbs with color styling
#                         icon = "ЁЯСН" if r['feedback'] == 'up' else "ЁЯСО";
#                         cls = "up" if r['feedback'] == 'up' else "down"
#                         q = (r['query'][:30] + '...') if len(r['query']) > 30 else r['query']
#                         st.markdown(f"<li><span>'{q}'</span> <span class='feedback-icon-{cls}'>{icon}</span></li>", unsafe_allow_html=True)
#                     st.markdown("</ul>", unsafe_allow_html=True)
#             st.markdown('</div>', unsafe_allow_html=True)
# 
#         # --- Row 3: Categories (Pie) & Deployment ---
#         col5, col6 = st.columns([2, 1])
#         with col5:
#             st.subheader("ЁЯез Query Categories")
#             if df.empty or 'query' not in df.columns: st.caption("No category data.")
#             else:
#                 def cat_q(q):
#                     q=str(q).lower()
#                     if any(s in q for s in ["headache", "fever", "cough", "cold", "pain", "sore", "migraine", "flu", "sir dard", "bukhar", "khansi", "sardi", "jukaam", "gala kharab", "рджрд░реНрдж", "рдмреБрдЦрд╛рд░", "рдЦрд╛рдВрд╕реА"]): return "Symptoms"
#                     if any(s in q for s in ["cut", "burn", "sprain", "injury", "bite", "chot", "jalna", "moch", "рдЪреЛрдЯ", "рдЬрд▓рдирд╛", "рдореЛрдЪ"]): return "First Aid"
#                     if any(s in q for s in ["sleep", "anxiety", "stress", "diet", "hydrate", "constipation", "nausea", "vomiting", "diarrhea", "dehydration", "insomnia", "rashes", "рдиреАрдВрдж", "рдЪрд┐рдВрддрд╛", "рддрдирд╛рд╡", "рдХрдмреНрдЬ", "рдорддрд▓реА", "рдЙрд▓реНрдЯреА", "рджрд╕реНрдд", "рдирд┐рд░реНрдЬрд▓реАрдХрд░рдг"]): return "Wellness"
#                     return "Other"
# 
#                 df['category'] = df['query'].apply(cat_q) if 'query' in df.columns else 'Other'; cat_counts = df['category'].value_counts()
#                 if not cat_counts.empty:
#                      pie_df = cat_counts.reset_index(); pie_df.columns = ['category', 'count']
#                      fig = px.pie(pie_df, names='category', values='count', hole=0.4,
#                                   color_discrete_sequence=px.colors.qualitative.Pastel) # Example: Pastel colors
#                      fig.update_layout(legend_title_text='Categories', paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)', font_color="#FFFFFF", showlegend=False)
#                      fig.update_traces(textinfo='percent+label', textfont_size=14, marker=dict(line=dict(color='#001A3A', width=2)))
#                      st.plotly_chart(fig, use_container_width=True)
#                 else: st.caption("Could not categorize.")
#         with col6:
#             st.subheader("ЁЯЪА Deployment Status"); st.markdown('<div class="admin-list-container">', unsafe_allow_html=True)
#             st.markdown("<ul><li><span style='color:#28a745;'>тЬЕ</span> Docker ready</li><li><span style='color:#28a745;'>тЬЕ</span> Cloud ready</li><li><span style='color:#FFA500;'>тП│</span> Docs pending</li></ul>", unsafe_allow_html=True) # Added icons
#             st.markdown('</div>', unsafe_allow_html=True)
# 
#     # --- KB Management Tab ---
#     with kb_manage_tab:
#         st.subheader("тЬН Knowledge Base Management")
#         st.write("Edit the JSON below to update the health knowledge base.")
#         kb_edit = load_kb()
#         kb_json = json.dumps(kb_edit, indent=4, ensure_ascii=False)
#         new_json = st.text_area("Edit KB JSON", value=kb_json, height=600, key="kb_edit_tab")
# 
#         col_k1, col_k2 = st.columns([1,5])
#         with col_k1:
#             if st.button("Save KB", type="primary", key="save_kb_tab", use_container_width=True):
#                 try:
#                     new_kb = json.loads(new_json)
#                     if save_kb(new_kb):
#                         # global KB; # Removed as it's declared at the start of save_kb
#                         # global ENTITY_MAP; # Removed as it's declared at the start of save_kb
#                         KB = new_kb
#                         ENTITY_MAP = defaultdict(list)
#                         for c, d in KB.items():
#                             for s in d.get("symptoms", []): ENTITY_MAP["symptom"].append(s)
#                             for p in d.get("body_parts", []): ENTITY_MAP["body_part"].append(p)
#                         st.success("KB updated!")
#                         # st.session_state.admin_tab = "KB" # Stay on this tab after saving
#                         st.rerun() # Rerun to refresh display
#                     else: st.error("Failed to save KB.")
#                 except json.JSONDecodeError: st.error("Error: Invalid JSON format.")
#                 except Exception as e: st.error(f"Error saving KB: {e}")
# 
#     # --- User Management Tab ---
#     with user_manage_tab:
#         st.subheader("ЁЯСд User Management")
#         st.write("View and manage registered users.")
#         all_users_data = load_users()
#         users_list = [{"Email": email, **user_data.get("profile", {})} for email, user_data in all_users_data.items() if email != ADMIN_EMAIL]
#         users_df = pd.DataFrame(users_list) if users_list else pd.DataFrame()
# 
#         if users_df.empty:
#             st.caption("No regular users registered.")
#         else:
#             st.dataframe(users_df, use_container_width=True)
# 
#             st.markdown("#### Delete User")
#             user_to_delete = st.selectbox("Select User to Delete", options=[""] + list(users_df['Email'].tolist()))
#             if st.button("Delete User", disabled=not user_to_delete): # Removed type="danger"
#                  if user_to_delete and user_to_delete in all_users_data:
#                      del all_users_data[user_to_delete]
#                      save_users(all_users_data)
#                      st.success(f"User '{user_to_delete}' deleted.")
#                      st.rerun()
#                  elif user_to_delete: st.error("User not found.")
# 
#     # --- Feedback Management Tab ---
#     with feedback_tab:
#         st.subheader("ЁЯТм All Feedback & Comments")
#         st.write("Review user feedback and comments.")
#         if df.empty or 'feedback' not in df.columns: st.warning("No logs.")
#         else:
#             # Filter for logs with actual feedback
#             fb_all = df[df['feedback'] != 'none'][['timestamp', 'email', 'query', 'feedback', 'comment']].sort_values('timestamp', ascending=False)
#             if fb_all.empty: st.caption("No rated feedback available.")
#             else:
#                 # Add index column for display
#                 fb_all_display = fb_all.reset_index(drop=True)
#                 fb_all_display.index += 1 # Start index from 1
# 
#                 st.dataframe(fb_all_display, use_container_width=True,
#                              column_config={"timestamp": st.column_config.DatetimeColumn("Time", format="YY-MM-DD HH:mm"),
#                                             "email":"User", "query":"Query", "feedback":"Rating", "comment":"Comment"})
# 
# # ==================================================================
# # --- MAIN APP LOGIC ---
# # ==================================================================
# st.title("ЁЯкД Health & Wellness Assistant")
# users = load_users(); user_email = get_user_from_token()
# keys_to_init = {"chat_archive": [], "show_admin": False, "feedback_submitted": {}, "admin_tab": None, "login_type": "user"} # Added login_type
# 
# for key, default_val in keys_to_init.items():
#     if key not in st.session_state: st.session_state[key] = default_val
# 
# # --- LOGGED-IN VIEW ---
# if user_email:
#     # Set show_admin to True if logged in as admin and either it's the first load or admin dashboard button was clicked
#     if user_email == ADMIN_EMAIL and "chat_history" not in st.session_state:
#          st.session_state.show_admin = True
#          # Don't rerun here, it will be handled below
# 
#     with st.sidebar: # Sidebar unchanged
#         st.header("Controls & History")
#         if user_email == ADMIN_EMAIL:
#             st.markdown("---"); st.subheader("ЁЯСС Admin")
#             if st.button("Admin Dashboard"): st.session_state.show_admin=True; st.session_state.admin_tab=None; st.rerun()
#             st.markdown("---")
#         is_online = st.toggle("Bot Status", value=True, key="bot_status")
#         if st.button("тЮХ New Chat", key="new_chat"):
#             if "chat_history" in st.session_state and len(st.session_state.chat_history)>1: st.session_state.chat_archive.insert(0, st.session_state.chat_history)
#             st.session_state.pop("chat_history", None); st.session_state.pop("feedback_submitted", None); st.session_state.show_admin = False; st.rerun() # Ensure admin dashboard is hidden on new chat
#         st.markdown("---"); st.subheader("Chat History")
#         if st.session_state.chat_archive:
#             for i, chat in enumerate(st.session_state.chat_archive[:10]):
#                 first = next((m for r, m in chat if r == 'user'), "Chat"); title = first[:50] + ("..." if len(first)>50 else "")
#                 if st.button(f"ЁЯУЬ {title}", key=f"chat_{i}"): st.session_state.chat_history=chat; st.session_state.feedback_submitted={}; st.session_state.show_admin=False; st.rerun()
#         else: st.caption("No past chats.")
#         st.markdown("---")
#         if st.button(" Logout", key="logout"):
#             keys = list(st.session_state.keys()); [st.session_state.pop(k, None) for k in keys]; st.success("Logged out."); st.rerun()
# 
#     # --- Main Area ---
#     if st.session_state.get("show_admin", False) and user_email == ADMIN_EMAIL: show_admin_dashboard()
#     else: # --- Standard Chat Interface ---
#         if not st.session_state.get("show_admin", False): st.success(f"тЬЕ Logged in as {user_email}")
#         profile = users.get(user_email, {}).get("profile", {})
# 
#         # --- NEW: Tabbed Profile Section ---
#         st.divider()
#         with st.expander("ЁЯСд User Profile & Settings", expanded=False):
#              prof_tab1, prof_tab2 = st.tabs(["View Profile", "тЪЩ Settings"])
#              with prof_tab1:
#                   st.markdown("### ЁЯУМ Current Profile Data")
#                   current_profile_display = users.get(user_email, {}).get("profile", {})
#                   st.json({k:v for k,v in current_profile_display.items() if k in PROFILE_SCHEMA}) # Shows profile data
#              with prof_tab2:
#                  st.markdown("### тЪЩ Update Settings")
#                  with st.form("profile_form"):
#                      new_profile = {} # Holds updated values
#                      for key, config in PROFILE_SCHEMA.items():
#                          current_value = profile.get(key, config["default"])
#                          if config["type"] == "text": new_profile[key] = st.text_input(config["label"], current_value, key=f"profile_{key}")
#                          elif config["type"] == "select":
#                              options = config["options"]; index = options.index(current_value) if current_value in options else 0
#                              new_profile[key] = st.selectbox(config["label"], options, index=index, key=f"profile_{key}")
#                      save_prof = st.form_submit_button("ЁЯТ╛ Save Settings", type="primary", use_container_width=True)
#                      if save_prof:
#                          if user_email in users: users[user_email]["profile"] = new_profile; save_users(users); st.success("Settings saved!"); st.rerun()
#                          else: st.error("User not found.")
#         st.divider()
# 
#         # --- CHATBOT INTERFACE ---
#         status_class = "status-online" if is_online else "status-offline"; status_text = "Online" if is_online else "Offline"
#         st.markdown(f'<div class="bot-header"><span class="status-indicator {status_class}"></span><span>Chatbot ({status_text})</span></div>', unsafe_allow_html=True)
#         if "chat_history" not in st.session_state:
#             lang = profile.get("language", "English"); init_greet = "ЁЯдЦ рдирдорд╕реНрддреЗ!..." if lang == "Hindi" else "ЁЯдЦ Hello! Ask me..."
#             st.session_state.chat_history = [("bot", init_greet)]
# 
#         chat_display_cont = st.container(height=400) # Fixed height chat area
#         with chat_display_cont:
#             chat_hist = list(st.session_state.chat_history)
#             for i, (role, text) in enumerate(chat_hist):
#                 resp_id = f"msg_{i}_{hash_pw(text)[:8]}"
#                 if role == "user": st.markdown(f'<div class="chat-bubble user-msg">{text}</div>', unsafe_allow_html=True)
#                 else:
#                     st.markdown(f'<div class="chat-bubble bot-msg">{text}</div>', unsafe_allow_html=True)
#                     if i > 0:
#                         fb_state = st.session_state.feedback_submitted.get(resp_id)
#                         if fb_state is None:
#                             st.markdown('<div class="feedback-button-container">', unsafe_allow_html=True)
#                             fb_c1, fb_c2, _ = st.columns([1, 1, 10])
#                             with fb_c1: # Green Thumb UP
#                                 if st.button("ЁЯСН", key=f"up_{resp_id}", help="Helpful"): log_feedback(resp_id, "up"); st.session_state.feedback_submitted[resp_id] = True; st.toast("Thanks! ЁЯСН"); st.rerun()
#                             with fb_c2: # Red Thumb DOWN
#                                 if st.button("ЁЯСО", key=f"down_{resp_id}", help="Not Helpful"): st.session_state.feedback_submitted[resp_id] = "pending"; st.rerun()
#                             st.markdown('</div>', unsafe_allow_html=True)
#                         elif fb_state == "pending": # Show comment form for DOWN vote
#                              st.markdown('<div class="feedback-button-container">', unsafe_allow_html=True)
#                              with st.form(key=f"comm_{resp_id}"):
#                                 comm = st.text_input("Reason (opt):", key=f"comm_{resp_id}")
#                                 if st.form_submit_button("Submit"): log_feedback(resp_id, "down", comm); st.session_state.feedback_submitted[resp_id] = True; st.toast("Thanks! ЁЯСО"); st.rerun()
#                              st.markdown('</div>', unsafe_allow_html=True)
#                         elif fb_state == True: st.markdown("<span class='feedback-received'>Feedback sent!</span>", unsafe_allow_html=True)
#             st.markdown("<div id='end-of-chat'></div>", unsafe_allow_html=True)
# 
#         with st.form("chat_form", clear_on_submit=True): # Chat Input Form
#             col1, col2 = st.columns([6, 1])
#             with col1: user_in = st.text_input("Type...", key="chat_in", label_visibility="collapsed", placeholder="Ask symptoms...")
#             with col2: send = st.form_submit_button("тЮд", help="Send")
#             if send and user_in.strip():
#                 st.session_state.chat_history.append(("user", user_in))
#                 resp = "ЁЯдЦ Offline..." if not is_online else get_bot_response(user_in)
#                 resp_id = f"msg_{len(st.session_state.chat_history)}_{hash_pw(resp)[:8]}"
#                 log_chat(user_email, user_in, resp, resp_id)
#                 st.session_state.chat_history.append(("bot", resp))
#                 st.rerun()
#             elif send: st.warning("Please type.")
# 
#         st.divider()
#         st.write("Or try:")
#         dyn_kw = get_frequent_keywords(user_email)
#         cols = st.columns(5) # Use exactly 5 columns for keyword buttons
#         for i, kw in enumerate(dyn_kw):
#             with cols[i]:
#                 if st.button(kw, use_container_width=True, key=f"kw_{i}"):
#                     u_click = kw.split(" ", 1)[-1].strip()
#                     st.session_state.chat_history.append(("user", u_click))
#                     resp = "ЁЯдЦ Offline..." if not is_online else get_bot_response(u_click)
#                     resp_id = f"msg_{len(st.session_state.chat_history)}_{hash_pw(resp)[:8]}"
#                     log_chat(user_email, u_click, resp, resp_id)
#                     st.session_state.chat_history.append(("bot", resp))
#                     st.rerun()
# 
# # --- LOGIN / REGISTER VIEW ---
# else:
#     st.subheader("Welcome")
#     login_options = st.tabs(["User Login/Register", "Admin Login"])
#     if st.session_state.login_type == "user":
#         with login_options[0]:
#             st.markdown("### User Account")
#             with st.form("user_login_reg_form"):
#                 em = st.text_input("Email", key="user_em_in")
#                 pw = st.text_input("Password", type="password", key="user_pw_in")
#                 c1, c2 = st.columns(2)
#                 with c1: reg = st.form_submit_button("Register")
#                 with c2: log = st.form_submit_button("Login")
#                 if reg:
#                     if not validate_email(em): st.error("Invalid Email")
#                     elif not validate_password(pw): st.error("Pwd >= 6 chars")
#                     elif em in users: st.error("User exists")
#                     else: users[em]={"password":hash_pw(pw),"profile":{k:v["default"] for k,v in PROFILE_SCHEMA.items()}}; save_users(users); st.success("Registered! Please Login."); st.session_state.login_type="user"; st.rerun()
#                 if log:
#                     if not validate_email(em) or not pw: st.error("Email/Pwd required")
#                     elif em in users and users[em]["password"] == hash_pw(pw): st.session_state["token"] = create_token(em); st.success("Login ok!"); st.session_state.login_type="user"; st.rerun()
#                     else: st.error("Invalid credentials.")
#         with login_options[1]:
#             st.markdown("### Admin Account")
#             st.caption(f"Use email: `{ADMIN_EMAIL}`")
#             if st.button("Switch to Admin Login", key="switch_to_admin"): st.session_state.login_type = "admin"; st.rerun()
# 
#     elif st.session_state.login_type == "admin":
#          with login_options[1]:
#             st.markdown("### Admin Account")
#             with st.form("admin_login_form"):
#                 em = st.text_input("Admin Email", value=ADMIN_EMAIL, key="admin_em_in", disabled=True)
#                 pw = st.text_input("Admin Password", type="password", key="admin_pw_in")
#                 c1, c2 = st.columns(2)
#                 with c1: admin_log = st.form_submit_button("Admin Login")
#                 with c2: switch_to_user = st.form_submit_button("Switch to User Login")
#                 if admin_log:
#                     if not validate_email(em) or not pw: st.error("Email/Pwd required")
#                     elif em == ADMIN_EMAIL and em in users and users[em]["password"] == hash_pw(pw):
#                         st.session_state["token"] = create_token(em)
#                         st.session_state.show_admin = True  # Set show_admin to True for admin login
#                         st.success("Admin Login ok!")
#                         st.session_state.login_type="admin"
#                         st.rerun()
#                     else: st.error("Invalid admin credentials.")
#                 if switch_to_user:
#                     st.session_state.login_type = "user"
#                     st.session_state.show_admin = False # Ensure admin dashboard is hidden on switch
#                     st.rerun()
#          with login_options[0]:
#              st.markdown("### User Account")
#              if st.button("Switch to User Login", key="switch_to_user_2"): st.session_state.login_type = "user"; st.rerun()

# --- Install all requirements from the file ---
!pip install -r requirements.txt
!pip install pyngrok

# --- IMPORTANT: Run the database script ONCE to create/populate the DB ---
print("Initializing database...")
!python database.py
print("Database initialization complete.")

# --- Run the Streamlit app with ngrok ---
from pyngrok import ngrok
import subprocess
import time

# Use your ngrok token from M3
ngrok.set_auth_token("330C4yfwAdgpTtWYYlkmS7dfn7w_5MZCDm4wYrYewVji5PtsC") # Replace with your actual token if needed

# Kill old tunnels if running
try:
    ngrok.kill()
except Exception as e:
    print(f"No existing ngrok tunnels to kill or error: {e}")

# --- Start Streamlit ---
print("Starting Streamlit app in the background...")
# Note: We use port 8501, the default for Streamlit
p = subprocess.Popen(["streamlit", "run", "app.py", "--server.port=8501"])

print("Waiting 10 seconds for the Streamlit server to start...")
time.sleep(10)

# Create URL
try:
    public_url = ngrok.connect(8501)
    print("========================================================================")
    print("тЬЕ Your App is running here:", public_url)
    print("========================================================================")
    print(f"Streamlit PID: {p.pid}")
except Exception as e:
    print(f"тЭМ Error starting ngrok tunnel: {e}")
    print("   Please ensure ngrok is installed and your auth token is correct.")
    print("   Killing Streamlit process...")
    p.terminate()